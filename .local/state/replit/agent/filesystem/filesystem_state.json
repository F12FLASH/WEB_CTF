{"file_contents":{"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Player } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<Player>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    error,\n  };\n}\n","size_bytes":329},"client/src/lib/markdown.ts":{"content":"import DOMPurify from 'isomorphic-dompurify';\nimport { marked } from 'marked';\n\n/**\n * Render markdown to safe HTML with syntax highlighting support\n */\nexport function renderMarkdown(markdown: string): string {\n  // Configure marked for better code block rendering\n  marked.setOptions({\n    breaks: true,\n    gfm: true,\n  });\n\n  const html = marked(markdown) as string;\n  \n  // Sanitize to prevent XSS attacks\n  return DOMPurify.sanitize(html, {\n    ALLOWED_TAGS: [\n      'b', 'i', 'em', 'strong', 'a', 'p', 'br', 'ul', 'ol', 'li', \n      'code', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', \n      'blockquote', 'hr', 'table', 'thead', 'tbody', 'tr', 'th', 'td'\n    ],\n    ALLOWED_ATTR: ['href', 'target', 'rel', 'class']\n  });\n}\n","size_bytes":730},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\n// Helper function to get CSRF token from cookies\nfunction getCsrfToken(): string | null {\n  const cookies = document.cookie.split(\";\");\n  for (const cookie of cookies) {\n    const [name, value] = cookie.trim().split(\"=\");\n    if (name === \"csrf_token\") {\n      return value;\n    }\n  }\n  return null;\n}\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  // Add CSRF token for state-changing requests\n  const upperMethod = method.toUpperCase();\n  if ([\"POST\", \"PUT\", \"DELETE\", \"PATCH\"].includes(upperMethod)) {\n    const csrfToken = getCsrfToken();\n    if (csrfToken) {\n      headers[\"x-csrf-token\"] = csrfToken;\n    }\n  }\n  \n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2028},"server/scripts/backup-database.ts":{"content":"import { db } from \"../db\";\nimport { challenges, players, submissions, adminUsers, announcements } from \"@shared/schema\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nasync function backupDatabase() {\n  try {\n    console.log(\"üîÑ Starting database backup...\");\n\n    const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\n    const backupDir = path.join(process.cwd(), \"backups\");\n    \n    if (!fs.existsSync(backupDir)) {\n      fs.mkdirSync(backupDir, { recursive: true });\n    }\n\n    const [allChallenges, allPlayers, allSubmissions, allAdmins, allAnnouncements] = await Promise.all([\n      db.select().from(challenges),\n      db.select().from(players),\n      db.select().from(submissions),\n      db.select().from(adminUsers),\n      db.select().from(announcements),\n    ]);\n\n    const backup = {\n      timestamp: new Date().toISOString(),\n      version: \"1.0.0\",\n      data: {\n        challenges: allChallenges,\n        players: allPlayers,\n        submissions: allSubmissions,\n        adminUsers: allAdmins.map(admin => ({\n          ...admin,\n          passwordHash: \"[REDACTED]\"\n        })),\n        announcements: allAnnouncements,\n      },\n      stats: {\n        totalChallenges: allChallenges.length,\n        totalPlayers: allPlayers.length,\n        totalSubmissions: allSubmissions.length,\n        totalAdmins: allAdmins.length,\n        totalAnnouncements: allAnnouncements.length,\n      },\n    };\n\n    const backupFile = path.join(backupDir, `ctf-backup-${timestamp}.json`);\n    fs.writeFileSync(backupFile, JSON.stringify(backup, null, 2));\n\n    console.log(`‚úÖ Backup successful: ${backupFile}`);\n    console.log(`üìä Stats:`, backup.stats);\n\n    return backupFile;\n  } catch (error) {\n    console.error(\"‚ùå Backup failed:\", error);\n    process.exit(1);\n  }\n}\n\nbackupDatabase()\n  .then(() => {\n    console.log(\"‚úÖ Backup completed successfully\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"‚ùå Backup error:\", error);\n    process.exit(1);\n  });\n","size_bytes":2007},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"VERCEL_DEPLOY.md":{"content":"# H∆∞·ªõng D·∫´n Deploy CTF Platform L√™n Vercel\n\n## T·ªïng Quan\n\n·ª®ng d·ª•ng CTF Platform c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·ªÉ deploy l√™n Vercel v·ªõi ki·∫øn tr√∫c serverless. H∆∞·ªõng d·∫´n n√†y s·∫Ω gi√∫p b·∫°n tri·ªÉn khai ·ª©ng d·ª•ng full-stack (Frontend React + Backend Express + Database PostgreSQL) l√™n Vercel.\n\n## Chu·∫©n B·ªã\n\n### 1. T√†i Kho·∫£n C·∫ßn Thi·∫øt\n- T√†i kho·∫£n GitHub (ƒë·ªÉ l∆∞u code)\n- T√†i kho·∫£n Vercel (mi·ªÖn ph√≠ t·∫°i https://vercel.com)\n- T√†i kho·∫£n Neon ho·∫∑c s·ª≠ d·ª•ng Vercel Postgres (mi·ªÖn ph√≠)\n\n### 2. Ki·∫øn Tr√∫c ·ª®ng D·ª•ng\nCode ƒë√£ ƒë∆∞·ª£c c·∫•u tr√∫c l·∫°i ƒë·ªÉ ph√π h·ª£p v·ªõi Vercel:\n\n```\nproject/\n‚îú‚îÄ‚îÄ api/                    # Backend serverless functions\n‚îÇ   ‚îî‚îÄ‚îÄ index.mjs          # Express app (serverless-ready, ES modules)\n‚îú‚îÄ‚îÄ client/                # React frontend\n‚îÇ   ‚îî‚îÄ‚îÄ src/\n‚îú‚îÄ‚îÄ dist/public/           # Build output c·ªßa frontend\n‚îú‚îÄ‚îÄ vercel.json           # C·∫•u h√¨nh Vercel\n‚îî‚îÄ‚îÄ .vercelignore         # File b·ªè qua khi deploy\n```\n\n## C√°c B∆∞·ªõc Deploy\n\n### B∆∞·ªõc 1: ƒê·∫©y Code L√™n GitHub\n\n1. T·∫°o repository m·ªõi tr√™n GitHub\n2. K·∫øt n·ªëi v√† ƒë·∫©y code:\n\n```bash\ngit init\ngit add .\ngit commit -m \"Initial commit for Vercel deployment\"\ngit remote add origin https://github.com/USERNAME/REPO_NAME.git\ngit push -u origin main\n```\n\n### B∆∞·ªõc 2: Thi·∫øt L·∫≠p Database\n\n#### L·ª±a Ch·ªçn A: S·ª≠ D·ª•ng Vercel Postgres (Khuy·∫øn Ngh·ªã)\n\n1. ƒêƒÉng nh·∫≠p v√†o Vercel Dashboard\n2. V√†o tab **Storage**\n3. Click **Create Database** ‚Üí Ch·ªçn **Postgres**\n4. Ch·ªçn region g·∫ßn b·∫°n nh·∫•t\n5. Click **Create**\n6. Vercel s·∫Ω t·ª± ƒë·ªông t·∫°o bi·∫øn m√¥i tr∆∞·ªùng `DATABASE_URL`\n\n#### L·ª±a Ch·ªçn B: S·ª≠ D·ª•ng Neon (Hi·ªán T·∫°i)\n\nN·∫øu b·∫°n ƒë√£ c√≥ database Neon, ch·ªâ c·∫ßn copy `DATABASE_URL` ƒë·ªÉ s·ª≠ d·ª•ng trong b∆∞·ªõc 4.\n\n### B∆∞·ªõc 3: Import Project V√†o Vercel\n\n1. ƒêƒÉng nh·∫≠p v√†o https://vercel.com\n2. Click **Add New** ‚Üí **Project**\n3. Ch·ªçn repository GitHub c·ªßa b·∫°n\n4. Vercel s·∫Ω t·ª± ƒë·ªông ph√°t hi·ªán c·∫•u h√¨nh\n\n### B∆∞·ªõc 4: C·∫•u H√¨nh Environment Variables\n\nTrong ph·∫ßn **Environment Variables**, th√™m c√°c bi·∫øn sau:\n\n#### B·∫Øt Bu·ªôc:\n```\nDATABASE_URL=postgresql://user:password@host:5432/dbname\nSESSION_SECRET=your-random-secret-key-here\nNODE_ENV=production\n```\n\n#### T√πy Ch·ªçn:\n```\nFRONTEND_URL=https://your-app.vercel.app\n```\n\n**L∆∞u √Ω:** \n- `DATABASE_URL`: Copy t·ª´ Neon ho·∫∑c Vercel Postgres\n- `SESSION_SECRET`: **B·∫ÆT BU·ªòC** - T·∫°o chu·ªói ng·∫´u nhi√™n d√†i (√≠t nh·∫•t 32 k√Ω t·ª±). ·ª®ng d·ª•ng s·∫Ω kh√¥ng ch·∫°y n·∫øu thi·∫øu bi·∫øn n√†y.\n- C√≥ th·ªÉ t·∫°o secret key b·∫±ng l·ªánh: `openssl rand -base64 32`\n- **QUAN TR·ªåNG**: Kh√¥ng bao gi·ªù b·ªè qua SESSION_SECRET - ƒë√¢y l√† y√™u c·∫ßu b·∫£o m·∫≠t b·∫Øt bu·ªôc\n\n### B∆∞·ªõc 5: C·∫•u H√¨nh Build Settings\n\nVercel s·∫Ω t·ª± ƒë·ªông ph√°t hi·ªán nh·ªù `vercel.json`, nh∆∞ng ki·ªÉm tra l·∫°i:\n\n- **Framework Preset**: Other\n- **Build Command**: `npm run build` (ho·∫∑c ƒë·ªÉ tr·ªëng, Vercel s·∫Ω d√πng t·ª´ vercel.json)\n- **Output Directory**: `dist/public`\n- **Install Command**: `npm install`\n\n### B∆∞·ªõc 6: Deploy\n\n1. Click **Deploy**\n2. ƒê·ª£i Vercel build v√† deploy (2-5 ph√∫t)\n3. Sau khi ho√†n t·∫•t, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c URL: `https://your-app.vercel.app`\n\n### B∆∞·ªõc 7: Kh·ªüi T·∫°o Database\n\nSau khi deploy th√†nh c√¥ng, b·∫°n c·∫ßn t·∫°o b·∫£ng v√† d·ªØ li·ªáu m·∫´u:\n\n#### L·ª±a Ch·ªçn A: T·ª´ Vercel CLI (Khuy·∫øn Ngh·ªã)\n\n```bash\n# C√†i Vercel CLI\nnpm i -g vercel\n\n# ƒêƒÉng nh·∫≠p\nvercel login\n\n# Link project\nvercel link\n\n# Ch·∫°y migration\nvercel env pull .env.local\nnpm run db:push\n\n# T·∫°o admin user\nnpx tsx server/scripts/quick-init-admin.ts\n```\n\n#### L·ª±a Ch·ªçn B: T·ª´ Neon/Vercel Postgres Dashboard\n\n1. Truy c·∫≠p dashboard c·ªßa database\n2. M·ªü SQL Editor\n3. Copy n·ªôi dung t·ª´ file `shared/schema.ts` v√† t·∫°o b·∫£ng th·ªß c√¥ng\n4. Insert admin user:\n\n```sql\nINSERT INTO admins (id, username, password_hash, created_at)\nVALUES (\n  gen_random_uuid(),\n  'admin',\n  '$2b$10$encrypted_password_hash_here',\n  NOW()\n);\n```\n\n**L∆∞u √Ω:** B·∫°n c·∫ßn hash password tr∆∞·ªõc. C√≥ th·ªÉ d√πng tool online ho·∫∑c:\n\n```javascript\nconst bcrypt = require('bcrypt');\nbcrypt.hash('Admin123!@#', 10).then(console.log);\n```\n\n### B∆∞·ªõc 8: Ki·ªÉm Tra\n\n1. Truy c·∫≠p URL c·ªßa b·∫°n: `https://your-app.vercel.app`\n2. Ki·ªÉm tra trang ch·ªß load ƒë∆∞·ª£c\n3. ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi\n4. Th·ª≠ submit flag cho challenges\n5. ƒêƒÉng nh·∫≠p admin t·∫°i `/admin/login`\n\n## C·∫•u H√¨nh N√¢ng Cao\n\n### Custom Domain\n\n1. V√†o **Settings** ‚Üí **Domains**\n2. Th√™m domain c·ªßa b·∫°n\n3. C·∫•u h√¨nh DNS theo h∆∞·ªõng d·∫´n c·ªßa Vercel\n\n### Environment Variables Cho Nhi·ªÅu M√¥i Tr∆∞·ªùng\n\nVercel h·ªó tr·ª£ 3 m√¥i tr∆∞·ªùng:\n- **Production**: Deploy t·ª´ branch `main`\n- **Preview**: Deploy t·ª´ pull requests\n- **Development**: D√πng cho local development\n\nB·∫°n c√≥ th·ªÉ set bi·∫øn ri√™ng cho t·ª´ng m√¥i tr∆∞·ªùng.\n\n### Logs v√† Monitoring\n\n- Xem logs t·∫°i: **Deployments** ‚Üí Click deployment ‚Üí **Function Logs**\n- Vercel Analytics (mi·ªÖn ph√≠): **Analytics** tab\n- Error tracking: **Deployments** ‚Üí **Runtime Logs**\n\n### Qu·∫£n L√Ω Sessions Tr√™n Serverless\n\n**L∆∞u √Ω quan tr·ªçng:** ·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·ªÉ l∆∞u sessions trong PostgreSQL (s·ª≠ d·ª•ng `connect-pg-simple`) thay v√¨ b·ªô nh·ªõ. ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o:\n\n- Sessions ƒë∆∞·ª£c b·∫£o to√†n qua c√°c serverless function invocations\n- Ng∆∞·ªùi d√πng kh√¥ng b·ªã logout sau m·ªói request\n- H·ªó tr·ª£ horizontal scaling t·ªët h∆°n\n\nVercel s·∫Ω t·ª± ƒë·ªông t·∫°o b·∫£ng `session` trong database khi c·∫ßn thi·∫øt.\n\n## Troubleshooting\n\n### L·ªói \"Too many connections\"\n\n**Nguy√™n nh√¢n:** PostgreSQL gi·ªõi h·∫°n s·ªë k·∫øt n·ªëi, serverless functions t·∫°o nhi·ªÅu k·∫øt n·ªëi.\n\n**Gi·∫£i ph√°p:**\n- S·ª≠ d·ª•ng Vercel Postgres ho·∫∑c Neon (c√≥ connection pooling s·∫µn)\n- Ho·∫∑c s·ª≠ d·ª•ng PgBouncer\n\n### L·ªói \"Module not found\"\n\n**Nguy√™n nh√¢n:** Dependencies kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫ßy ƒë·ªß.\n\n**Gi·∫£i ph√°p:**\n```bash\n# ƒê·∫£m b·∫£o t·∫•t c·∫£ dependencies trong package.json\nnpm install\ngit add package-lock.json\ngit commit -m \"Update dependencies\"\ngit push\n```\n\n### API kh√¥ng ho·∫°t ƒë·ªông\n\n**Ki·ªÉm tra:**\n1. Environment variables ƒë√£ set ch∆∞a\n2. Xem Function Logs c√≥ l·ªói g√¨ kh√¥ng\n3. Database URL c√≥ ƒë√∫ng kh√¥ng\n4. Routes trong `vercel.json` c√≥ ƒë√∫ng kh√¥ng\n\n### Frontend hi·ªÉn th·ªã nh∆∞ng API l·ªói\n\n**Nguy√™n nh√¢n:** CORS ho·∫∑c API routes kh√¥ng ƒë√∫ng.\n\n**Gi·∫£i ph√°p:**\n- Ki·ªÉm tra `api/index.mjs` c√≥ export default app\n- Ki·ªÉm tra routes trong `vercel.json` ƒëang tr·ªè ƒë·∫øn `/api/index.mjs`\n- Ki·ªÉm tra SESSION_SECRET ƒë√£ ƒë∆∞·ª£c set ch∆∞a\n- Xem Function Logs ƒë·ªÉ bi·∫øt chi ti·∫øt l·ªói\n\n## C·∫≠p Nh·∫≠t ·ª®ng D·ª•ng\n\nM·ªói khi b·∫°n push code m·ªõi l√™n GitHub:\n\n```bash\ngit add .\ngit commit -m \"Update feature XYZ\"\ngit push\n```\n\nVercel s·∫Ω t·ª± ƒë·ªông:\n1. Ph√°t hi·ªán thay ƒë·ªïi\n2. Build l·∫°i ·ª©ng d·ª•ng\n3. Deploy phi√™n b·∫£n m·ªõi\n4. Cung c·∫•p preview URL cho t·ª´ng deployment\n\n## Chi Ph√≠\n\n### Vercel Free Tier Bao G·ªìm:\n- 100GB bandwidth/th√°ng\n- Unlimited deployments\n- Automatic HTTPS\n- Serverless Functions (100GB-hours)\n\n### Vercel Postgres Free Tier:\n- 256MB storage\n- 60 gi·ªù compute time/th√°ng\n- ƒê·ªß cho d·ª± √°n nh·ªè v√† demo\n\n### Neon Free Tier:\n- 0.5GB storage\n- 1 project\n- Unlimited compute time\n- Connection pooling\n\n## Li√™n H·ªá & H·ªó Tr·ª£\n\n- Vercel Docs: https://vercel.com/docs\n- Vercel Support: https://vercel.com/support\n- Neon Docs: https://neon.tech/docs\n\n## Ghi Ch√∫ B·∫£o M·∫≠t\n\n‚ö†Ô∏è **QUAN TR·ªåNG:**\n\n1. **ƒê·ªïi m·∫≠t kh·∫©u admin m·∫∑c ƒë·ªãnh** ngay sau khi deploy\n2. **SESSION_SECRET ph·∫£i l√† chu·ªói ng·∫´u nhi√™n m·∫°nh**\n3. **Kh√¥ng commit .env files** l√™n GitHub\n4. **K√≠ch ho·∫°t 2FA** cho t√†i kho·∫£n Vercel v√† GitHub\n5. **Xem logs th∆∞·ªùng xuy√™n** ƒë·ªÉ ph√°t hi·ªán truy c·∫≠p b·∫•t th∆∞·ªùng\n\n## K·∫øt Lu·∫≠n\n\nSau khi ho√†n th√†nh c√°c b∆∞·ªõc tr√™n, ·ª©ng d·ª•ng CTF Platform c·ªßa b·∫°n s·∫Ω ch·∫°y tr√™n Vercel v·ªõi:\n- ‚úÖ Frontend React ƒë∆∞·ª£c serve static\n- ‚úÖ Backend Express ch·∫°y serverless\n- ‚úÖ Database PostgreSQL (Vercel Postgres ho·∫∑c Neon)\n- ‚úÖ HTTPS t·ª± ƒë·ªông\n- ‚úÖ Auto-deployment t·ª´ GitHub\n- ‚úÖ Monitoring v√† logs\n\nCh√∫c b·∫°n deploy th√†nh c√¥ng! üöÄ\n","size_bytes":8381},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/routes/announcement.routes.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { insertAnnouncementSchema } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\nimport { requireAdmin } from \"../auth\";\n\nconst router = Router();\n\n// Public route - Get active announcements\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const announcements = await storage.getActiveAnnouncements();\n    res.json(announcements);\n  } catch (error) {\n    console.error(\"Error fetching active announcements:\", error);\n    res.status(500).json({ message: \"Failed to fetch announcements\" });\n  }\n});\n\n// Admin routes - Manage announcements\nrouter.get(\"/all\", requireAdmin, async (req, res) => {\n  try {\n    const announcements = await storage.getAllAnnouncements();\n    res.json(announcements);\n  } catch (error) {\n    console.error(\"Error fetching all announcements:\", error);\n    res.status(500).json({ message: \"Failed to fetch announcements\" });\n  }\n});\n\nrouter.post(\"/\", requireAdmin, async (req, res) => {\n  try {\n    const adminId = req.session.adminId!;\n    \n    const result = insertAnnouncementSchema.safeParse({\n      ...req.body,\n      createdBy: adminId,\n    });\n    \n    if (!result.success) {\n      const validationError = fromZodError(result.error);\n      return res.status(400).json({ message: validationError.message });\n    }\n\n    const announcement = await storage.createAnnouncement(result.data);\n    res.status(201).json(announcement);\n  } catch (error) {\n    console.error(\"Error creating announcement:\", error);\n    res.status(500).json({ message: \"Failed to create announcement\" });\n  }\n});\n\nrouter.put(\"/:id\", requireAdmin, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { title, message, type, isActive } = req.body;\n\n    const announcement = await storage.updateAnnouncement(id, {\n      title,\n      message,\n      type,\n      isActive,\n    });\n\n    if (!announcement) {\n      return res.status(404).json({ message: \"Announcement not found\" });\n    }\n\n    res.json(announcement);\n  } catch (error) {\n    console.error(\"Error updating announcement:\", error);\n    res.status(500).json({ message: \"Failed to update announcement\" });\n  }\n});\n\nrouter.delete(\"/:id\", requireAdmin, async (req, res) => {\n  try {\n    const { id } = req.params;\n    await storage.deleteAnnouncement(id);\n    res.json({ message: \"Announcement deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting announcement:\", error);\n    res.status(500).json({ message: \"Failed to delete announcement\" });\n  }\n});\n\nexport default router;\n","size_bytes":2577},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 222 15% 15%;\n\n  --border: 220 13% 91%;\n\n  --card: 220 13% 97%;\n\n  --card-foreground: 222 15% 15%;\n\n  --card-border: 220 13% 89%;\n\n  --sidebar: 220 13% 95%;\n\n  --sidebar-foreground: 222 15% 15%;\n\n  --sidebar-border: 220 13% 87%;\n\n  --sidebar-primary: 142 70% 45%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 13% 91%;\n\n  --sidebar-accent-foreground: 222 15% 15%;\n\n  --sidebar-ring: 142 70% 45%;\n\n  --popover: 220 13% 93%;\n\n  --popover-foreground: 222 15% 15%;\n\n  --popover-border: 220 13% 85%;\n\n  --primary: 142 70% 35%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 13% 89%;\n\n  --secondary-foreground: 222 15% 15%;\n\n  --muted: 220 12% 92%;\n\n  --muted-foreground: 222 15% 40%;\n\n  --accent: 200 15% 88%;\n\n  --accent-foreground: 200 90% 25%;\n\n  --destructive: 0 75% 45%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 13% 75%;\n  --ring: 142 70% 45%;\n  --chart-1: 142 70% 40%;\n  --chart-2: 200 90% 45%;\n  --chart-3: 38 95% 50%;\n  --chart-4: 280 70% 50%;\n  --chart-5: 0 75% 50%;\n\n  --font-sans: \"Inter\", \"Segoe UI\", system-ui, sans-serif;\n  --font-serif: \"Space Grotesk\", \"Segoe UI\", system-ui, sans-serif;\n  --font-mono: \"JetBrains Mono\", \"Courier New\", monospace;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 10% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 10% / 0.1);\n  --shadow-sm: 0px 1px 2px 0px hsl(220 13% 10% / 0.06), 0px 1px 3px 0px hsl(220 13% 10% / 0.1);\n  --shadow: 0px 2px 4px -1px hsl(220 13% 10% / 0.06), 0px 4px 6px -1px hsl(220 13% 10% / 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(220 13% 10% / 0.1), 0px 2px 4px -1px hsl(220 13% 10% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 13% 10% / 0.1), 0px 4px 6px -2px hsl(220 13% 10% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 13% 10% / 0.1), 0px 10px 10px -5px hsl(220 13% 10% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 10% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 15% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 222 15% 18%;\n\n  --card: 222 15% 12%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 222 15% 20%;\n\n  --sidebar: 222 15% 14%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 222 15% 22%;\n\n  --sidebar-primary: 142 70% 45%;\n\n  --sidebar-primary-foreground: 222 15% 8%;\n\n  --sidebar-accent: 222 15% 20%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 142 70% 45%;\n\n  --popover: 222 15% 16%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 222 15% 24%;\n\n  --primary: 142 70% 35%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 222 15% 22%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 222 12% 18%;\n\n  --muted-foreground: 0 0% 65%;\n\n  --accent: 200 18% 20%;\n\n  --accent-foreground: 200 90% 75%;\n\n  --destructive: 0 75% 35%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 222 15% 30%;\n  --ring: 142 70% 45%;\n  --chart-1: 142 60% 65%;\n  --chart-2: 200 90% 70%;\n  --chart-3: 38 95% 65%;\n  --chart-4: 280 70% 70%;\n  --chart-5: 0 75% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.4);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.3), 0px 1px 3px 0px hsl(0 0% 0% / 0.4);\n  --shadow: 0px 2px 4px -1px hsl(0 0% 0% / 0.3), 0px 4px 6px -1px hsl(0 0% 0% / 0.4);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.4), 0px 2px 4px -1px hsl(0 0% 0% / 0.3);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.4), 0px 4px 6px -2px hsl(0 0% 0% / 0.3);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.5), 0px 10px 10px -5px hsl(0 0% 0% / 0.3);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.6);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Animation Keyframes */\n  @keyframes float {\n    0%, 100% { transform: translateY(0) translateX(0); }\n    33% { transform: translateY(-20px) translateX(20px); }\n    66% { transform: translateY(20px) translateX(-20px); }\n  }\n\n  @keyframes rotate-slow {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n\n  @keyframes scale-in {\n    0% { \n      opacity: 0;\n      transform: scale(0.95);\n    }\n    100% { \n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n\n  @keyframes fade-in-up {\n    0% {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes slide-down {\n    0% {\n      opacity: 0;\n      transform: translateY(-10px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes fade-in {\n    0% {\n      opacity: 0;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n\n  @keyframes pulse-slow {\n    0%, 100% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0.7;\n    }\n  }\n\n  @keyframes bounce-slow {\n    0%, 100% {\n      transform: translateY(0);\n    }\n    50% {\n      transform: translateY(-5px);\n    }\n  }\n\n  @keyframes spin-slow {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n\n  @keyframes spin-reverse {\n    0% { transform: rotate(360deg); }\n    100% { transform: rotate(0deg); }\n  }\n\n  @keyframes bounce-in {\n    0% {\n      opacity: 0;\n      transform: scale(0.3);\n    }\n    50% {\n      opacity: 1;\n      transform: scale(1.05);\n    }\n    70% {\n      transform: scale(0.9);\n    }\n    100% {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n\n  @keyframes slide-in-right {\n    0% {\n      opacity: 0;\n      transform: translateX(-20px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n\n  /* Animation Classes */\n  .animate-float {\n    animation: float 8s ease-in-out infinite;\n  }\n\n  .animate-rotate-slow {\n    animation: rotate-slow 20s linear infinite;\n  }\n\n  .animate-scale-in {\n    animation: scale-in 0.4s ease-out both;\n  }\n\n  .animate-fade-in-up {\n    animation: fade-in-up 0.6s ease-out both;\n  }\n\n  .animate-slide-down {\n    animation: slide-down 0.5s ease-out;\n  }\n\n  .animate-fade-in {\n    animation: fade-in 0.6s ease-out both;\n  }\n\n  .animate-pulse-slow {\n    animation: pulse-slow 2s ease-in-out infinite;\n  }\n\n  .animate-bounce-slow {\n    animation: bounce-slow 2s ease-in-out infinite;\n  }\n\n  .animate-spin-slow {\n    animation: spin-slow 3s linear infinite;\n  }\n\n  .animate-spin-reverse {\n    animation: spin-reverse 2s linear infinite;\n  }\n\n  .animate-bounce-in {\n    animation: bounce-in 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55) both;\n  }\n\n  .animate-slide-in-right {\n    animation: slide-in-right 0.5s ease-out both;\n  }\n}","size_bytes":12636},"client/src/pages/Admin.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useEffect, useState, useMemo } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Plus,\n  Pencil,\n  Trash2,\n  Shield,\n  LogOut,\n  LayoutDashboard,\n  Trophy,\n  Users,\n  Target,\n  CheckCircle2,\n  Search,\n  Filter,\n  Menu,\n  X,\n  Megaphone,\n} from \"lucide-react\";\nimport type { Challenge, InsertChallenge, Announcement, InsertAnnouncement } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertChallengeSchema, insertAnnouncementSchema } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ntype AdminView = \"dashboard\" | \"challenges\" | \"announcements\";\n\ninterface AdminStats {\n  totalChallenges: number;\n  totalPlayers: number;\n  totalSubmissions: number;\n  successfulSolves: number;\n  challengesByCategory: Record<string, number>;\n  challengesByDifficulty: Record<string, number>;\n}\n\nexport function Admin() {\n  const [currentView, setCurrentView] = useState<AdminView>(\"dashboard\");\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingChallenge, setEditingChallenge] = useState<Challenge | null>(null);\n  const [originalFlag, setOriginalFlag] = useState<string>(\"\");\n  const [deletingId, setDeletingId] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState<string>(\"all\");\n  const [difficultyFilter, setDifficultyFilter] = useState<string>(\"all\");\n  const [isAnnouncementDialogOpen, setIsAnnouncementDialogOpen] = useState(false);\n  const [editingAnnouncement, setEditingAnnouncement] = useState<Announcement | null>(null);\n  const [deletingAnnouncementId, setDeletingAnnouncementId] = useState<string | null>(null);\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const { data: session, isLoading: sessionLoading } = useQuery<{\n    authenticated: boolean;\n    admin?: { id: string; username: string };\n  }>({\n    queryKey: [\"/api/admin/session\"],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (!sessionLoading && !session?.authenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please login to access the admin panel\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/admin/login\");\n    }\n  }, [session, sessionLoading, setLocation, toast]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<AdminStats>({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: !!session?.authenticated,\n  });\n\n  const { data: challenges, isLoading: challengesLoading } = useQuery<Challenge[]>({\n    queryKey: [\"/api/admin/challenges\"],\n    enabled: !!session?.authenticated,\n  });\n\n  const { data: announcements, isLoading: announcementsLoading } = useQuery<Announcement[]>({\n    queryKey: [\"/api/announcements/all\"],\n    enabled: !!session?.authenticated,\n  });\n\n  const form = useForm<InsertChallenge>({\n    resolver: zodResolver(insertChallengeSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      category: \"web\",\n      difficulty: \"easy\",\n      points: 100,\n      flag: \"\",\n    },\n  });\n\n  const announcementForm = useForm<InsertAnnouncement>({\n    resolver: zodResolver(insertAnnouncementSchema),\n    defaultValues: {\n      title: \"\",\n      message: \"\",\n      type: \"info\",\n      isActive: 1,\n      createdBy: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertChallenge) => {\n      return apiRequest(\"POST\", \"/api/challenges\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Challenge Created\",\n        description: \"New challenge has been added successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/challenges\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges\"] });\n      setIsCreateOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create challenge\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: { id: string; challenge: InsertChallenge }) => {\n      return apiRequest(\"PUT\", `/api/challenges/${data.id}`, data.challenge);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Challenge Updated\",\n        description: \"Challenge has been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/challenges\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges\"] });\n      setEditingChallenge(null);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update challenge\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/challenges/${id}`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Challenge Deleted\",\n        description: \"Challenge has been removed successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/challenges\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges\"] });\n      setDeletingId(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete challenge\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/admin/logout\", {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been logged out successfully\",\n      });\n      window.location.href = \"/admin/login\";\n    },\n  });\n\n  const createAnnouncementMutation = useMutation({\n    mutationFn: async (data: InsertAnnouncement) => {\n      return apiRequest(\"POST\", \"/api/announcements\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Announcement Created\",\n        description: \"New announcement has been added successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/announcements/all\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/announcements\"] });\n      setIsAnnouncementDialogOpen(false);\n      announcementForm.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create announcement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAnnouncementMutation = useMutation({\n    mutationFn: async (data: { id: string; announcement: Partial<InsertAnnouncement> }) => {\n      return apiRequest(\"PUT\", `/api/announcements/${data.id}`, data.announcement);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Announcement Updated\",\n        description: \"Announcement has been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/announcements/all\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/announcements\"] });\n      setEditingAnnouncement(null);\n      announcementForm.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update announcement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAnnouncementMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/announcements/${id}`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Announcement Deleted\",\n        description: \"Announcement has been removed successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/announcements/all\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/announcements\"] });\n      setDeletingAnnouncementId(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete announcement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertChallenge) => {\n    if (editingChallenge) {\n      const challengeData = {\n        ...data,\n        flag: data.flag.trim() || originalFlag,\n      };\n      updateMutation.mutate({ id: editingChallenge.id, challenge: challengeData });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (challenge: Challenge) => {\n    setEditingChallenge(challenge);\n    setOriginalFlag(challenge.flag || \"\");\n    form.reset({\n      title: challenge.title,\n      description: challenge.description,\n      category: challenge.category,\n      difficulty: challenge.difficulty,\n      points: challenge.points,\n      flag: challenge.flag || \"\",\n    });\n  };\n\n  const handleCloseDialog = () => {\n    setIsCreateOpen(false);\n    setEditingChallenge(null);\n    setOriginalFlag(\"\");\n    form.reset();\n  };\n\n  const onAnnouncementSubmit = (data: InsertAnnouncement) => {\n    if (editingAnnouncement) {\n      updateAnnouncementMutation.mutate({ \n        id: editingAnnouncement.id, \n        announcement: data \n      });\n    } else {\n      createAnnouncementMutation.mutate(data);\n    }\n  };\n\n  const handleEditAnnouncement = (announcement: Announcement) => {\n    setEditingAnnouncement(announcement);\n    announcementForm.reset({\n      title: announcement.title,\n      message: announcement.message,\n      type: announcement.type,\n      isActive: announcement.isActive,\n      createdBy: announcement.createdBy,\n    });\n    setIsAnnouncementDialogOpen(true);\n  };\n\n  const handleCloseAnnouncementDialog = () => {\n    setIsAnnouncementDialogOpen(false);\n    setEditingAnnouncement(null);\n    announcementForm.reset();\n  };\n\n  const filteredChallenges = useMemo(() => {\n    if (!challenges) return [];\n    \n    return challenges.filter((challenge) => {\n      const matchesSearch = challenge.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        challenge.description.toLowerCase().includes(searchQuery.toLowerCase());\n      const matchesCategory = categoryFilter === \"all\" || challenge.category === categoryFilter;\n      const matchesDifficulty = difficultyFilter === \"all\" || challenge.difficulty === difficultyFilter;\n      \n      return matchesSearch && matchesCategory && matchesDifficulty;\n    });\n  }, [challenges, searchQuery, categoryFilter, difficultyFilter]);\n\n  if (sessionLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"flex flex-col items-center gap-4\">\n          <Shield className=\"h-12 w-12 text-primary animate-pulse\" />\n          <p className=\"text-muted-foreground\">Loading admin panel...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const StatCard = ({ \n    title, \n    value, \n    icon: Icon, \n    gradient \n  }: { \n    title: string; \n    value: number | string; \n    icon: any; \n    gradient: string;\n  }) => (\n    <Card className=\"overflow-hidden relative group hover:shadow-lg transition-all duration-300\">\n      <div className={`absolute inset-0 opacity-5 group-hover:opacity-10 transition-opacity ${gradient}`} />\n      <CardContent className=\"p-6 relative\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-muted-foreground mb-2\">{title}</p>\n            <h3 className=\"text-4xl font-bold bg-gradient-to-br from-foreground to-foreground/70 bg-clip-text text-transparent\">\n              {value}\n            </h3>\n          </div>\n          <div className={`h-14 w-14 rounded-xl ${gradient} flex items-center justify-center shadow-lg`}>\n            <Icon className=\"h-7 w-7 text-white\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-gradient-to-br from-background via-background to-muted/20\">\n      <aside\n        className={`${\n          sidebarOpen ? \"w-72\" : \"w-0\"\n        } transition-all duration-300 border-r bg-card/50 backdrop-blur-xl flex-shrink-0 overflow-hidden shadow-xl`}\n      >\n        <div className=\"p-6 border-b bg-gradient-to-r from-primary/10 to-primary/5\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"h-12 w-12 rounded-xl bg-gradient-to-br from-primary to-primary/80 flex items-center justify-center shadow-lg\">\n              <Shield className=\"h-7 w-7 text-primary-foreground\" />\n            </div>\n            <div>\n              <h2 className=\"font-bold text-xl bg-gradient-to-r from-foreground to-foreground/70 bg-clip-text text-transparent\">\n                Admin Panel\n              </h2>\n              <p className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                <span className=\"h-2 w-2 rounded-full bg-green-500 animate-pulse\" />\n                {session?.admin?.username}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <nav className=\"p-4 space-y-2\">\n          <button\n            onClick={() => setCurrentView(\"dashboard\")}\n            className={`w-full flex items-center gap-3 px-4 py-3.5 rounded-xl transition-all duration-200 ${\n              currentView === \"dashboard\"\n                ? \"bg-gradient-to-r from-primary to-primary/90 text-primary-foreground shadow-lg scale-105\"\n                : \"hover:bg-accent/50 hover:scale-102\"\n            }`}\n          >\n            <LayoutDashboard className=\"h-5 w-5\" />\n            <span className=\"font-semibold\">Dashboard</span>\n          </button>\n\n          <button\n            onClick={() => setCurrentView(\"challenges\")}\n            className={`w-full flex items-center gap-3 px-4 py-3.5 rounded-xl transition-all duration-200 ${\n              currentView === \"challenges\"\n                ? \"bg-gradient-to-r from-primary to-primary/90 text-primary-foreground shadow-lg scale-105\"\n                : \"hover:bg-accent/50 hover:scale-102\"\n            }`}\n          >\n            <Trophy className=\"h-5 w-5\" />\n            <span className=\"font-semibold\">Challenges</span>\n          </button>\n\n          <button\n            onClick={() => setCurrentView(\"announcements\")}\n            className={`w-full flex items-center gap-3 px-4 py-3.5 rounded-xl transition-all duration-200 ${\n              currentView === \"announcements\"\n                ? \"bg-gradient-to-r from-primary to-primary/90 text-primary-foreground shadow-lg scale-105\"\n                : \"hover:bg-accent/50 hover:scale-102\"\n            }`}\n          >\n            <Megaphone className=\"h-5 w-5\" />\n            <span className=\"font-semibold\">Announcements</span>\n          </button>\n        </nav>\n\n        <div className=\"absolute bottom-0 w-72 p-4 border-t bg-card/80 backdrop-blur\">\n          <Button\n            variant=\"outline\"\n            onClick={() => logoutMutation.mutate()}\n            className=\"w-full gap-2 hover:bg-destructive/10 hover:text-destructive hover:border-destructive transition-all\"\n            disabled={logoutMutation.isPending}\n          >\n            <LogOut className=\"h-4 w-4\" />\n            Logout\n          </Button>\n        </div>\n      </aside>\n\n      <main className=\"flex-1 overflow-auto\">\n        <header className=\"border-b bg-card/80 backdrop-blur-xl sticky top-0 z-10 shadow-sm\">\n          <div className=\"flex items-center justify-between p-6\">\n            <div className=\"flex items-center gap-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setSidebarOpen(!sidebarOpen)}\n                className=\"hover:bg-primary/10\"\n              >\n                {sidebarOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n              </Button>\n              <div>\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-foreground via-foreground to-foreground/60 bg-clip-text text-transparent\">\n                  {currentView === \"dashboard\" ? \"Dashboard\" : currentView === \"challenges\" ? \"Challenges Management\" : \"Announcements\"}\n                </h1>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {currentView === \"dashboard\"\n                    ? \"Overview of your CTF platform\"\n                    : currentView === \"challenges\"\n                    ? \"Create, edit, and manage challenges\"\n                    : \"Manage platform announcements\"}\n                </p>\n              </div>\n            </div>\n\n            {currentView === \"challenges\" && (\n              <Button\n                onClick={() => setIsCreateOpen(true)}\n                className=\"gap-2 bg-gradient-to-r from-primary to-primary/90 shadow-lg hover:shadow-xl transition-all\"\n                data-testid=\"button-create-challenge\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                Add Challenge\n              </Button>\n            )}\n            \n            {currentView === \"announcements\" && (\n              <Button\n                onClick={() => setIsAnnouncementDialogOpen(true)}\n                className=\"gap-2 bg-gradient-to-r from-primary to-primary/90 shadow-lg hover:shadow-xl transition-all\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                Add Announcement\n              </Button>\n            )}\n          </div>\n        </header>\n\n        <div className=\"p-6\">\n          {currentView === \"dashboard\" && (\n            <div className=\"space-y-6\">\n              {statsLoading ? (\n                <>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    {[1, 2, 3, 4].map((i) => (\n                      <Skeleton key={i} className=\"h-32\" />\n                    ))}\n                  </div>\n                </>\n              ) : (\n                <>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                    <StatCard\n                      title=\"Total Challenges\"\n                      value={stats?.totalChallenges || 0}\n                      icon={Trophy}\n                      gradient=\"bg-gradient-to-br from-amber-500 to-orange-600\"\n                    />\n                    <StatCard\n                      title=\"Total Players\"\n                      value={stats?.totalPlayers || 0}\n                      icon={Users}\n                      gradient=\"bg-gradient-to-br from-blue-500 to-cyan-600\"\n                    />\n                    <StatCard\n                      title=\"Total Submissions\"\n                      value={stats?.totalSubmissions || 0}\n                      icon={Target}\n                      gradient=\"bg-gradient-to-br from-purple-500 to-pink-600\"\n                    />\n                    <StatCard\n                      title=\"Successful Solves\"\n                      value={stats?.successfulSolves || 0}\n                      icon={CheckCircle2}\n                      gradient=\"bg-gradient-to-br from-green-500 to-emerald-600\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    <Card className=\"overflow-hidden border-2 hover:shadow-xl transition-shadow\">\n                      <CardHeader className=\"bg-gradient-to-r from-blue-50 to-cyan-50 dark:from-blue-950/20 dark:to-cyan-950/20\">\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <div className=\"h-8 w-8 rounded-lg bg-gradient-to-br from-blue-500 to-cyan-600 flex items-center justify-center\">\n                            <Trophy className=\"h-4 w-4 text-white\" />\n                          </div>\n                          Challenges by Category\n                        </CardTitle>\n                        <CardDescription>Distribution across categories</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"pt-6\">\n                        {stats?.challengesByCategory && Object.keys(stats.challengesByCategory).length > 0 ? (\n                          <div className=\"space-y-4\">\n                            {Object.entries(stats.challengesByCategory).map(([category, count]) => (\n                              <div key={category} className=\"group\">\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <Badge variant=\"outline\" className=\"capitalize font-semibold\">\n                                    {category}\n                                  </Badge>\n                                  <span className=\"font-mono font-bold text-lg\">{count}</span>\n                                </div>\n                                <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n                                  <div\n                                    className=\"h-full bg-gradient-to-r from-blue-500 to-cyan-600 transition-all duration-500 group-hover:from-blue-600 group-hover:to-cyan-700\"\n                                    style={{ width: `${(count / (stats?.totalChallenges || 1)) * 100}%` }}\n                                  />\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        ) : (\n                          <p className=\"text-sm text-muted-foreground text-center py-8\">\n                            No challenges yet\n                          </p>\n                        )}\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"overflow-hidden border-2 hover:shadow-xl transition-shadow\">\n                      <CardHeader className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950/20 dark:to-pink-950/20\">\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <div className=\"h-8 w-8 rounded-lg bg-gradient-to-br from-purple-500 to-pink-600 flex items-center justify-center\">\n                            <Target className=\"h-4 w-4 text-white\" />\n                          </div>\n                          Challenges by Difficulty\n                        </CardTitle>\n                        <CardDescription>Distribution by difficulty level</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"pt-6\">\n                        {stats?.challengesByDifficulty && Object.keys(stats.challengesByDifficulty).length > 0 ? (\n                          <div className=\"space-y-4\">\n                            {Object.entries(stats.challengesByDifficulty).map(([difficulty, count]) => {\n                              const gradientClass = \n                                difficulty === \"easy\" ? \"from-green-500 to-emerald-600 group-hover:from-green-600 group-hover:to-emerald-700\" :\n                                difficulty === \"medium\" ? \"from-amber-500 to-orange-600 group-hover:from-amber-600 group-hover:to-orange-700\" :\n                                \"from-red-500 to-rose-600 group-hover:from-red-600 group-hover:to-rose-700\";\n                              \n                              return (\n                                <div key={difficulty} className=\"group\">\n                                  <div className=\"flex items-center justify-between mb-2\">\n                                    <Badge\n                                      className={`capitalize font-semibold ${\n                                        difficulty === \"easy\"\n                                          ? \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100\"\n                                          : difficulty === \"medium\"\n                                          ? \"bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-100\"\n                                          : \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-100\"\n                                      }`}\n                                    >\n                                      {difficulty}\n                                    </Badge>\n                                    <span className=\"font-mono font-bold text-lg\">{count}</span>\n                                  </div>\n                                  <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n                                    <div\n                                      className={`h-full bg-gradient-to-r transition-all duration-500 ${gradientClass}`}\n                                      style={{ width: `${(count / (stats?.totalChallenges || 1)) * 100}%` }}\n                                    />\n                                  </div>\n                                </div>\n                              );\n                            })}\n                          </div>\n                        ) : (\n                          <p className=\"text-sm text-muted-foreground text-center py-8\">\n                            No challenges yet\n                          </p>\n                        )}\n                      </CardContent>\n                    </Card>\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n\n          {currentView === \"announcements\" && (\n            <div className=\"space-y-6\">\n              <Card className=\"border-2 shadow-lg overflow-hidden\">\n                <CardContent className=\"p-0\">\n                  {announcementsLoading ? (\n                    <div className=\"p-6\">\n                      {[1, 2, 3].map((i) => (\n                        <Skeleton key={i} className=\"h-16 w-full mb-4\" />\n                      ))}\n                    </div>\n                  ) : announcements && announcements.length > 0 ? (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Title</TableHead>\n                          <TableHead>Type</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead>Created</TableHead>\n                          <TableHead className=\"text-right\">Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {announcements.map((announcement) => (\n                          <TableRow key={announcement.id}>\n                            <TableCell>\n                              <div>\n                                <p className=\"font-medium\">{announcement.title}</p>\n                                <p className=\"text-sm text-muted-foreground line-clamp-1\">\n                                  {announcement.message}\n                                </p>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant=\"outline\" className=\"capitalize\">\n                                {announcement.type}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <Badge\n                                className={\n                                  announcement.isActive === 1\n                                    ? \"bg-green-500 text-white\"\n                                    : \"bg-gray-500 text-white\"\n                                }\n                              >\n                                {announcement.isActive === 1 ? \"Active\" : \"Inactive\"}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              {announcement.createdAt\n                                ? new Date(announcement.createdAt).toLocaleDateString()\n                                : \"N/A\"}\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <div className=\"flex gap-2 justify-end\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={() => handleEditAnnouncement(announcement)}\n                                >\n                                  <Pencil className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={() => setDeletingAnnouncementId(announcement.id)}\n                                >\n                                  <Trash2 className=\"h-4 w-4 text-destructive\" />\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <Megaphone className=\"h-16 w-16 text-muted-foreground mx-auto mb-4 opacity-50\" />\n                      <h3 className=\"text-lg font-semibold mb-2\">No announcements yet</h3>\n                      <p className=\"text-muted-foreground mb-4\">\n                        Create your first announcement to get started\n                      </p>\n                      <Button onClick={() => setIsAnnouncementDialogOpen(true)}>\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add Announcement\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {currentView === \"challenges\" && (\n            <div className=\"space-y-6\">\n              <Card className=\"border-2 shadow-md\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-col md:flex-row gap-4\">\n                    <div className=\"flex-1 relative\">\n                      <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Search challenges...\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        className=\"pl-10 h-11 border-2 focus:ring-2 focus:ring-primary/20\"\n                      />\n                    </div>\n                    <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                      <SelectTrigger className=\"w-full md:w-48 h-11 border-2\">\n                        <Filter className=\"h-4 w-4 mr-2\" />\n                        <SelectValue placeholder=\"Category\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Categories</SelectItem>\n                        <SelectItem value=\"web\">Web</SelectItem>\n                        <SelectItem value=\"crypto\">Crypto</SelectItem>\n                        <SelectItem value=\"forensics\">Forensics</SelectItem>\n                        <SelectItem value=\"reverse\">Reverse</SelectItem>\n                        <SelectItem value=\"binary\">Binary</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Select value={difficultyFilter} onValueChange={setDifficultyFilter}>\n                      <SelectTrigger className=\"w-full md:w-48 h-11 border-2\">\n                        <Filter className=\"h-4 w-4 mr-2\" />\n                        <SelectValue placeholder=\"Difficulty\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Difficulties</SelectItem>\n                        <SelectItem value=\"easy\">Easy</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"hard\">Hard</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-2 shadow-lg overflow-hidden\">\n                <CardContent className=\"p-0\">\n                  {challengesLoading ? (\n                    <div className=\"p-6\">\n                      {[1, 2, 3].map((i) => (\n                        <Skeleton key={i} className=\"h-16 w-full mb-4\" />\n                      ))}\n                    </div>\n                  ) : filteredChallenges && filteredChallenges.length > 0 ? (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Title</TableHead>\n                          <TableHead>Category</TableHead>\n                          <TableHead>Difficulty</TableHead>\n                          <TableHead>Points</TableHead>\n                          <TableHead className=\"text-right\">Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {filteredChallenges.map((challenge) => (\n                          <TableRow key={challenge.id} data-testid={`row-challenge-${challenge.id}`}>\n                            <TableCell>\n                              <div>\n                                <p className=\"font-medium\" data-testid={`text-title-${challenge.id}`}>\n                                  {challenge.title}\n                                </p>\n                                <p className=\"text-sm text-muted-foreground line-clamp-1\">\n                                  {challenge.description}\n                                </p>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant=\"outline\" className=\"capitalize\">\n                                {challenge.category}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <Badge\n                                className={\n                                  challenge.difficulty === \"easy\"\n                                    ? \"bg-chart-1 text-primary-foreground\"\n                                    : challenge.difficulty === \"medium\"\n                                    ? \"bg-chart-3 text-primary-foreground\"\n                                    : \"bg-chart-5 text-primary-foreground\"\n                                }\n                              >\n                                {challenge.difficulty}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <span className=\"font-mono font-bold\">\n                                {challenge.points}\n                              </span>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <div className=\"flex gap-2 justify-end\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={() => handleEdit(challenge)}\n                                  data-testid={`button-edit-${challenge.id}`}\n                                >\n                                  <Pencil className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={() => setDeletingId(challenge.id)}\n                                  data-testid={`button-delete-${challenge.id}`}\n                                >\n                                  <Trash2 className=\"h-4 w-4 text-destructive\" />\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <Trophy className=\"h-16 w-16 text-muted-foreground mx-auto mb-4 opacity-50\" />\n                      <h3 className=\"text-lg font-semibold mb-2\">\n                        {searchQuery || categoryFilter !== \"all\" || difficultyFilter !== \"all\"\n                          ? \"No challenges found\"\n                          : \"No challenges yet\"}\n                      </h3>\n                      <p className=\"text-muted-foreground mb-4\">\n                        {searchQuery || categoryFilter !== \"all\" || difficultyFilter !== \"all\"\n                          ? \"Try adjusting your filters\"\n                          : \"Create your first challenge to get started\"}\n                      </p>\n                      {!searchQuery && categoryFilter === \"all\" && difficultyFilter === \"all\" && (\n                        <Button onClick={() => setIsCreateOpen(true)} data-testid=\"button-create-first\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Challenge\n                        </Button>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </main>\n\n      <Dialog open={isCreateOpen || !!editingChallenge} onOpenChange={(open) => !open && handleCloseDialog()}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingChallenge ? \"Edit Challenge\" : \"Create New Challenge\"}\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Title</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Challenge title\"\n                        {...field}\n                        data-testid=\"input-title\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Challenge description and instructions\"\n                        rows={6}\n                        {...field}\n                        data-testid=\"input-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Category</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-category\">\n                            <SelectValue placeholder=\"Select category\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"web\">Web</SelectItem>\n                          <SelectItem value=\"crypto\">Crypto</SelectItem>\n                          <SelectItem value=\"forensics\">Forensics</SelectItem>\n                          <SelectItem value=\"reverse\">Reverse</SelectItem>\n                          <SelectItem value=\"binary\">Binary</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"difficulty\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Difficulty</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-difficulty\">\n                            <SelectValue placeholder=\"Select difficulty\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"easy\">Easy</SelectItem>\n                          <SelectItem value=\"medium\">Medium</SelectItem>\n                          <SelectItem value=\"hard\">Hard</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"points\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Points</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"100\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                        data-testid=\"input-points\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"flag\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Flag</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"text\"\n                        placeholder=\"flag{example_flag_here}\"\n                        className=\"font-mono\"\n                        {...field}\n                        data-testid=\"input-flag\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex gap-2 justify-end pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleCloseDialog}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-save\"\n                >\n                  {createMutation.isPending || updateMutation.isPending\n                    ? \"Saving...\"\n                    : editingChallenge\n                    ? \"Update Challenge\"\n                    : \"Create Challenge\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      <AlertDialog open={!!deletingId} onOpenChange={(open) => !open && setDeletingId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Challenge</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this challenge? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deletingId && deleteMutation.mutate(deletingId)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <Dialog open={isAnnouncementDialogOpen || !!editingAnnouncement} onOpenChange={(open) => !open && handleCloseAnnouncementDialog()}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingAnnouncement ? \"Edit Announcement\" : \"Create New Announcement\"}\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...announcementForm}>\n            <form onSubmit={announcementForm.handleSubmit(onAnnouncementSubmit)} className=\"space-y-4\">\n              <FormField\n                control={announcementForm.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Title</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Announcement title\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={announcementForm.control}\n                name=\"message\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Message</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Announcement message\"\n                        rows={6}\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={announcementForm.control}\n                  name=\"type\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Type</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"info\">Info</SelectItem>\n                          <SelectItem value=\"warning\">Warning</SelectItem>\n                          <SelectItem value=\"success\">Success</SelectItem>\n                          <SelectItem value=\"error\">Error</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={announcementForm.control}\n                  name=\"isActive\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select\n                        onValueChange={(value) => field.onChange(parseInt(value))}\n                        defaultValue={field.value?.toString()}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select status\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"1\">Active</SelectItem>\n                          <SelectItem value=\"0\">Inactive</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"flex gap-2 justify-end pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleCloseAnnouncementDialog}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createAnnouncementMutation.isPending || updateAnnouncementMutation.isPending}\n                >\n                  {createAnnouncementMutation.isPending || updateAnnouncementMutation.isPending\n                    ? \"Saving...\"\n                    : editingAnnouncement\n                    ? \"Update Announcement\"\n                    : \"Create Announcement\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      <AlertDialog open={!!deletingAnnouncementId} onOpenChange={(open) => !open && setDeletingAnnouncementId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Announcement</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this announcement? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deletingAnnouncementId && deleteAnnouncementMutation.mutate(deletingAnnouncementId)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":51651},"client/src/components/Layout.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Flag, Trophy, Shield, Menu, X, LogIn, UserPlus, LogOut, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useAdminAuth } from \"@/hooks/useAdminAuth\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const { user, isAuthenticated } = useAuth();\n  const { isAdmin, admin } = useAdminAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      // Universal logout - destroys both admin and user sessions\n      await apiRequest(\"POST\", \"/api/logout\", {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been logged out successfully\",\n      });\n      // Reload page to completely reset app state\n      window.location.href = \"/\";\n    },\n  });\n\n  const baseNavItems = [\n    { path: \"/\", label: \"Challenges\", icon: Flag },\n    { path: \"/leaderboard\", label: \"Leaderboard\", icon: Trophy },\n  ];\n\n  // Show admin menu if user is authenticated as admin (not regular user)\n  const navItems = (isAdmin && !isAuthenticated)\n    ? [...baseNavItems, { path: \"/admin\", label: \"Admin\", icon: Shield }]\n    : baseNavItems;\n\n  // Check if user is logged in (either as regular user or admin)\n  const isLoggedIn = isAuthenticated || isAdmin;\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <header className=\"sticky top-0 z-50 border-b border-border bg-background/95 backdrop-blur-md animate-slide-down\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex h-16 items-center justify-between\">\n            <Link href=\"/\" data-testid=\"link-home\">\n              <div className=\"flex items-center gap-3 hover-elevate active-elevate-2 rounded-md px-3 py-2 -ml-3 group transition-all duration-300\">\n                <div className=\"flex h-9 w-9 items-center justify-center rounded-md bg-gradient-to-br from-primary via-chart-3 to-chart-5 group-hover:opacity-90 transition-opacity duration-300\">\n                  <Flag className=\"h-5 w-5 text-primary-foreground\" />\n                </div>\n                <div className=\"flex flex-col\">\n                  <span className=\"font-serif text-lg font-bold tracking-tight group-hover:text-primary transition-colors duration-300\">CTF Platform</span>\n                  <span className=\"text-xs text-muted-foreground\">Capture The Flag</span>\n                </div>\n              </div>\n            </Link>\n\n            <nav className=\"hidden md:flex items-center gap-2\">\n              {navItems.map((item, index) => {\n                const Icon = item.icon;\n                const isActive = location === item.path;\n                return (\n                  <Link key={item.path} href={item.path} data-testid={`link-${item.label.toLowerCase()}`}>\n                    <Button\n                      variant={isActive ? \"secondary\" : \"ghost\"}\n                      className=\"gap-2 transition-all duration-300 animate-fade-in\"\n                      style={{ animationDelay: `${index * 0.1}s` }}\n                    >\n                      <Icon className=\"h-4 w-4\" />\n                      {item.label}\n                    </Button>\n                  </Link>\n                );\n              })}\n              \n              {isLoggedIn ? (\n                <>\n                  <div className=\"flex items-center gap-2 px-3 py-2 text-sm animate-fade-in\" style={{ animationDelay: \"0.3s\" }}>\n                    {isAuthenticated && user ? (\n                      <>\n                        <User className=\"h-4 w-4 text-primary animate-pulse-slow\" />\n                        <span className=\"font-medium\">{user.username}</span>\n                        <span className=\"text-muted-foreground\">({user.score} pts)</span>\n                      </>\n                    ) : isAdmin && admin ? (\n                      <>\n                        <Shield className=\"h-4 w-4 text-primary animate-pulse-slow\" />\n                        <span className=\"font-medium\">{admin.username}</span>\n                        <span className=\"text-xs text-muted-foreground\">(Admin)</span>\n                      </>\n                    ) : null}\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"gap-2 transition-all duration-300 hover:text-destructive hover:opacity-90 animate-fade-in\"\n                    style={{ animationDelay: \"0.4s\" }}\n                    onClick={() => logoutMutation.mutate()}\n                    disabled={logoutMutation.isPending}\n                  >\n                    <LogOut className=\"h-4 w-4\" />\n                    Logout\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <Link href=\"/login\">\n                    <Button variant=\"ghost\" className=\"gap-2 transition-all duration-300 animate-fade-in\" style={{ animationDelay: \"0.3s\" }}>\n                      <LogIn className=\"h-4 w-4\" />\n                      Login\n                    </Button>\n                  </Link>\n                  <Link href=\"/register\">\n                    <Button variant=\"default\" className=\"gap-2 transition-all duration-300 bg-gradient-to-r from-primary to-chart-3 hover:opacity-90 animate-fade-in\" style={{ animationDelay: \"0.4s\" }}>\n                      <UserPlus className=\"h-4 w-4\" />\n                      Register\n                    </Button>\n                  </Link>\n                </>\n              )}\n            </nav>\n\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"md:hidden transition-opacity duration-300 hover:opacity-70\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {mobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n            </Button>\n          </div>\n\n          {mobileMenuOpen && (\n            <div className=\"md:hidden border-t border-border py-4 animate-slide-down\">\n              <nav className=\"flex flex-col gap-2\">\n                {navItems.map((item, index) => {\n                  const Icon = item.icon;\n                  const isActive = location === item.path;\n                  return (\n                    <Link key={item.path} href={item.path} data-testid={`link-mobile-${item.label.toLowerCase()}`}>\n                      <Button\n                        variant={isActive ? \"secondary\" : \"ghost\"}\n                        className=\"w-full justify-start gap-2 transition-all duration-300 hover:opacity-90 animate-fade-in\"\n                        style={{ animationDelay: `${index * 0.1}s` }}\n                        onClick={() => setMobileMenuOpen(false)}\n                      >\n                        <Icon className=\"h-4 w-4\" />\n                        {item.label}\n                      </Button>\n                    </Link>\n                  );\n                })}\n                \n                <div className=\"border-t border-border my-2\" />\n                \n                {isLoggedIn ? (\n                  <>\n                    <div className=\"px-4 py-2 text-sm\">\n                      {isAuthenticated && user ? (\n                        <div className=\"flex items-center gap-2\">\n                          <User className=\"h-4 w-4\" />\n                          <span className=\"font-medium\">{user.username}</span>\n                          <span className=\"text-muted-foreground\">({user.score} pts)</span>\n                        </div>\n                      ) : isAdmin && admin ? (\n                        <div className=\"flex items-center gap-2\">\n                          <Shield className=\"h-4 w-4 text-primary\" />\n                          <span className=\"font-medium\">{admin.username}</span>\n                          <span className=\"text-xs text-muted-foreground\">(Admin)</span>\n                        </div>\n                      ) : null}\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start gap-2 transition-all duration-300 hover:text-destructive hover:opacity-90\"\n                      onClick={() => {\n                        setMobileMenuOpen(false);\n                        logoutMutation.mutate();\n                      }}\n                      disabled={logoutMutation.isPending}\n                    >\n                      <LogOut className=\"h-4 w-4\" />\n                      Logout\n                    </Button>\n                  </>\n                ) : (\n                  <>\n                    <Link href=\"/login\">\n                      <Button \n                        variant=\"ghost\" \n                        className=\"w-full justify-start gap-2 transition-all duration-300 hover:opacity-90\"\n                        onClick={() => setMobileMenuOpen(false)}\n                      >\n                        <LogIn className=\"h-4 w-4\" />\n                        Login\n                      </Button>\n                    </Link>\n                    <Link href=\"/register\">\n                      <Button \n                        variant=\"default\" \n                        className=\"w-full justify-start gap-2 transition-all duration-300 hover:opacity-90\"\n                        onClick={() => setMobileMenuOpen(false)}\n                      >\n                        <UserPlus className=\"h-4 w-4\" />\n                        Register\n                      </Button>\n                    </Link>\n                  </>\n                )}\n              </nav>\n            </div>\n          )}\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-8 animate-fade-in\">\n        {children}\n      </main>\n\n      <footer className=\"border-t border-border py-6 mt-12 animate-fade-in\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between gap-4 text-sm text-muted-foreground\">\n            <p>¬© 2025 CTF Platform. Test your cybersecurity skills.</p>\n            <p className=\"font-mono\">Flag format: flag{\"{\"}...{\"}\"}</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":10613},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"server/scripts/quick-init-admin.ts":{"content":"import { storage } from \"../storage\";\nimport { AuthService } from \"../services/auth.service\";\n\n/**\n * Quick script to create admin user with default credentials\n * Run with: npx tsx server/scripts/quick-init-admin.ts\n */\nasync function quickInitAdmin() {\n  try {\n    console.log(\"=== Quick Admin Setup ===\\n\");\n\n    const username = \"admin\";\n    const password = \"Admin123!@#\"; // Strong default password\n\n    // Check if admin already exists\n    const existingAdmin = await storage.getAdminByUsername(username);\n    if (existingAdmin) {\n      console.log(\"‚ö†Ô∏è  Admin user already exists!\");\n      console.log(\"Username: admin\");\n      console.log(\"If you forgot the password, delete the admin and run this script again.\");\n      process.exit(0);\n    }\n\n    // Create admin with hashed password\n    await storage.createAdmin({\n      username,\n      passwordHash: await AuthService.hashPassword(password),\n    });\n\n    console.log(\"‚úÖ Admin user created successfully!\");\n    console.log(\"\\n--- Admin Credentials ---\");\n    console.log(\"Username: admin\");\n    console.log(\"Password: Admin123!@#\");\n    console.log(\"\\n‚ö†Ô∏è  IMPORTANT: Change this password after first login!\");\n    console.log(\"------------------------\\n\");\n\n    process.exit(0);\n  } catch (error) {\n    console.error(\"‚ùå Error creating admin:\", error);\n    process.exit(1);\n  }\n}\n\nquickInitAdmin();\n","size_bytes":1371},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"server/scripts/export-sql.ts":{"content":"import { db } from \"../db\";\nimport { pool } from \"../db\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nasync function exportSQLDump() {\n  try {\n    console.log(\"üîÑ Exporting database to SQL...\");\n\n    const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\n    const exportDir = path.join(process.cwd(), \"exports\");\n    \n    if (!fs.existsSync(exportDir)) {\n      fs.mkdirSync(exportDir, { recursive: true });\n    }\n\n    const tables = [\"challenges\", \"players\", \"submissions\", \"admin_users\", \"announcements\", \"sessions\"];\n    let sqlDump = `-- CTF Platform Database Export\n-- Generated: ${new Date().toISOString()}\n-- PostgreSQL Database Dump\n\nSET statement_timeout = 0;\nSET lock_timeout = 0;\nSET client_encoding = 'UTF8';\nSET standard_conforming_strings = on;\nSET check_function_bodies = false;\nSET xmloption = content;\nSET client_min_messages = warning;\nSET row_security = off;\n\n`;\n\n    for (const tableName of tables) {\n      try {\n        const schemaResult = await pool.query(`\n          SELECT column_name, data_type, character_maximum_length, is_nullable, column_default\n          FROM information_schema.columns\n          WHERE table_name = $1\n          ORDER BY ordinal_position;\n        `, [tableName]);\n\n        if (schemaResult.rows.length === 0) continue;\n\n        sqlDump += `\\n-- Table: ${tableName}\\n`;\n        sqlDump += `DROP TABLE IF EXISTS ${tableName} CASCADE;\\n`;\n        \n        const dataResult = await pool.query(`SELECT * FROM ${tableName}`);\n        \n        if (dataResult.rows.length > 0) {\n          const columns = Object.keys(dataResult.rows[0]);\n          \n          for (const row of dataResult.rows) {\n            const values = columns.map(col => {\n              const val = row[col];\n              if (val === null) return 'NULL';\n              if (typeof val === 'string') return `'${val.replace(/'/g, \"''\")}'`;\n              if (typeof val === 'number') return val.toString();\n              if (typeof val === 'boolean') return val ? 'TRUE' : 'FALSE';\n              if (val instanceof Date) return `'${val.toISOString()}'`;\n              if (typeof val === 'object') return `'${JSON.stringify(val).replace(/'/g, \"''\")}'`;\n              return `'${String(val).replace(/'/g, \"''\")}'`;\n            });\n\n            sqlDump += `INSERT INTO ${tableName} (${columns.join(', ')}) VALUES (${values.join(', ')});\\n`;\n          }\n        }\n\n        console.log(`‚úì Exported table: ${tableName} (${dataResult.rows.length} rows)`);\n      } catch (tableError) {\n        console.warn(`‚ö†Ô∏è  Skipped table ${tableName}: ${tableError}`);\n      }\n    }\n\n    const sqlFile = path.join(exportDir, `ctf-export-${timestamp}.sql`);\n    fs.writeFileSync(sqlFile, sqlDump);\n\n    console.log(`\\n‚úÖ SQL export successful: ${sqlFile}`);\n    return sqlFile;\n  } catch (error) {\n    console.error(\"‚ùå SQL export failed:\", error);\n    process.exit(1);\n  } finally {\n    await pool.end();\n  }\n}\n\nexportSQLDump()\n  .then(() => {\n    console.log(\"‚úÖ Export completed successfully\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"‚ùå Export error:\", error);\n    process.exit(1);\n  });\n","size_bytes":3142},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"shared/utils/security.ts":{"content":"import DOMPurify from 'isomorphic-dompurify';\nimport { marked } from 'marked';\n\n/**\n * Sanitize HTML to prevent XSS attacks\n */\nexport function sanitizeHtml(html: string): string {\n  return DOMPurify.sanitize(html, {\n    ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'a', 'p', 'br', 'ul', 'ol', 'li', 'code', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote'],\n    ALLOWED_ATTR: ['href', 'target', 'rel']\n  });\n}\n\n/**\n * Render markdown to safe HTML\n */\nexport function renderMarkdown(markdown: string): string {\n  const html = marked(markdown) as string;\n  return sanitizeHtml(html);\n}\n\n/**\n * Validate and sanitize user input\n */\nexport function sanitizeInput(input: string): string {\n  return input.trim().replace(/[<>]/g, '');\n}\n","size_bytes":734},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { getSessionMiddleware } from \"./auth\";\nimport { cookieParser, setCsrfToken, verifyCsrfToken } from \"./middleware/csrf\";\nimport { storage } from \"./storage\";\nimport authRoutes from \"./routes/auth.routes\";\nimport adminRoutes from \"./routes/admin.routes\";\nimport challengeRoutes from \"./routes/challenge.routes\";\nimport announcementRoutes from \"./routes/announcement.routes\";\nimport publicRoutes from \"./routes/public.routes\";\nimport installRoutes from \"./routes/install.routes\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.use(cookieParser());\n  app.use(getSessionMiddleware());\n  \n  app.use(\"/api/install\", installRoutes);\n  \n  app.use(setCsrfToken);\n  app.use(verifyCsrfToken);\n\n  app.use(\"/api/auth\", authRoutes);\n  app.use(\"/api/admin\", adminRoutes);\n  app.use(\"/api/challenges\", challengeRoutes);\n  app.use(\"/api/announcements\", announcementRoutes);\n  app.use(\"/api\", publicRoutes);\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":1081},"client/src/pages/ChallengeDetail.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { MarkdownRenderer } from \"@/components/MarkdownRenderer\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useAdminAuth } from \"@/hooks/useAdminAuth\";\nimport { CheckCircle2, XCircle, ArrowLeft, Terminal, Trophy, LogIn, Shield } from \"lucide-react\";\nimport type { Challenge } from \"@shared/schema\";\nimport { useState } from \"react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nconst difficultyConfig = {\n  easy: { color: \"bg-chart-1 text-primary-foreground\", label: \"Easy\" },\n  medium: { color: \"bg-chart-3 text-primary-foreground\", label: \"Medium\" },\n  hard: { color: \"bg-chart-5 text-primary-foreground\", label: \"Hard\" },\n};\n\nexport function ChallengeDetail() {\n  const [, params] = useRoute(\"/challenge/:id\");\n  const challengeId = params?.id;\n  const [flag, setFlag] = useState(\"\");\n  const { toast } = useToast();\n  const { user, isAuthenticated } = useAuth();\n  const { isAdmin } = useAdminAuth();\n\n  const { data: challenge, isLoading } = useQuery<Challenge>({\n    queryKey: [\"/api/challenges\", challengeId],\n    enabled: !!challengeId,\n  });\n\n  const { data: solvedChallenges } = useQuery<string[]>({\n    queryKey: [\"/api/solved\"],\n    enabled: isAuthenticated,\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (submittedFlag: string) => {\n      const res = await apiRequest(\"POST\", `/api/challenges/${challengeId}/submit`, {\n        flag: submittedFlag,\n      });\n      return await res.json();\n    },\n    onSuccess: (data: { correct: boolean; message: string }) => {\n      if (data.correct) {\n        toast({\n          title: \"Correct Flag!\",\n          description: `You earned ${challenge?.points} points!`,\n          variant: \"default\",\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/solved\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/leaderboard\"] });\n        setFlag(\"\");\n      } else {\n        toast({\n          title: \"Incorrect Flag\",\n          description: \"Try again! Double-check your flag format.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!flag.trim()) return;\n    submitMutation.mutate(flag);\n  };\n\n  const isSolved = challenge && solvedChallenges?.includes(challenge.id);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6 max-w-5xl mx-auto\">\n        <Skeleton className=\"h-10 w-32\" />\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-8 w-3/4 mb-4\" />\n                <Skeleton className=\"h-4 w-full mb-2\" />\n                <Skeleton className=\"h-4 w-full mb-2\" />\n                <Skeleton className=\"h-4 w-2/3\" />\n              </CardContent>\n            </Card>\n          </div>\n          <div>\n            <Card>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-10 w-full mb-4\" />\n                <Skeleton className=\"h-10 w-full\" />\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!challenge) {\n    return (\n      <div className=\"max-w-5xl mx-auto\">\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <XCircle className=\"h-12 w-12 text-destructive mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold mb-2\">Challenge Not Found</h2>\n            <p className=\"text-muted-foreground mb-6\">This challenge does not exist or has been removed.</p>\n            <Link href=\"/\">\n              <Button>Back to Challenges</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const difficulty = challenge.difficulty.toLowerCase() as keyof typeof difficultyConfig;\n  const diffConfig = difficultyConfig[difficulty] || difficultyConfig.medium;\n\n  return (\n    <div className=\"space-y-6 max-w-5xl mx-auto\">\n      <Link href=\"/\" data-testid=\"link-back\">\n        <Button variant=\"ghost\" className=\"gap-2\">\n          <ArrowLeft className=\"h-4 w-4\" />\n          Back to Challenges\n        </Button>\n      </Link>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-start justify-between gap-4 mb-4\">\n                <div className=\"space-y-3 flex-1\">\n                  <div className=\"flex items-center gap-2 flex-wrap\">\n                    <Badge variant=\"outline\" className=\"gap-1\">\n                      <Terminal className=\"h-3 w-3\" />\n                      {challenge.category}\n                    </Badge>\n                    <Badge className={diffConfig.color}>\n                      {diffConfig.label}\n                    </Badge>\n                    {isSolved && (\n                      <Badge className=\"bg-primary text-primary-foreground gap-1\">\n                        <CheckCircle2 className=\"h-3 w-3\" />\n                        Solved\n                      </Badge>\n                    )}\n                  </div>\n                  <h1 className=\"text-3xl font-serif font-bold\" data-testid=\"text-challenge-title\">\n                    {challenge.title}\n                  </h1>\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <Trophy className=\"h-5 w-5 text-primary\" />\n                      <span className=\"text-2xl font-bold font-mono text-primary\" data-testid=\"text-challenge-points\">\n                        {challenge.points}\n                      </span>\n                      <span className=\"text-sm text-muted-foreground\">points</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <h2 className=\"text-lg font-semibold mb-3\">Description</h2>\n                  <MarkdownRenderer \n                    content={challenge.description} \n                    data-testid=\"text-challenge-description\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"space-y-6\">\n          <Card className=\"sticky top-20\">\n            <CardHeader>\n              <h2 className=\"text-lg font-semibold\">Submit Flag</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Enter the flag you found to earn points\n              </p>\n            </CardHeader>\n            <CardContent>\n              {isAdmin ? (\n                <div className=\"text-center py-8\">\n                  <Shield className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Admin Account</h3>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Admins cannot submit flags. Please register a player account to participate in challenges.\n                  </p>\n                  <Link href=\"/register\">\n                    <Button variant=\"default\">Create Player Account</Button>\n                  </Link>\n                </div>\n              ) : !isAuthenticated ? (\n                <div className=\"text-center py-8\">\n                  <LogIn className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Login Required</h3>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Please login or register to submit flags\n                  </p>\n                  <div className=\"flex gap-2 justify-center\">\n                    <Link href=\"/login\">\n                      <Button variant=\"default\">Login</Button>\n                    </Link>\n                    <Link href=\"/register\">\n                      <Button variant=\"outline\">Register</Button>\n                    </Link>\n                  </div>\n                </div>\n              ) : (\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">\n                      Flag\n                    </label>\n                    <Input\n                      type=\"text\"\n                      placeholder=\"flag{...}\"\n                      value={flag}\n                      onChange={(e) => setFlag(e.target.value)}\n                      className=\"font-mono\"\n                      disabled={isSolved || submitMutation.isPending}\n                      data-testid=\"input-flag\"\n                    />\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={isSolved || submitMutation.isPending || !flag.trim()}\n                    data-testid=\"button-submit-flag\"\n                  >\n                    {submitMutation.isPending ? \"Checking...\" : isSolved ? \"Already Solved\" : \"Submit Flag\"}\n                  </Button>\n                  {user && (\n                    <p className=\"text-xs text-muted-foreground text-center\">\n                      Submitting as <strong>{user.username}</strong>\n                    </p>\n                  )}\n                </form>\n              )}\n\n              {isSolved && (\n                <div className=\"mt-4 p-4 rounded-md bg-primary/10 border border-primary/20\">\n                  <div className=\"flex items-center gap-2 text-primary\">\n                    <CheckCircle2 className=\"h-5 w-5\" />\n                    <span className=\"font-semibold\">Challenge Completed!</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    You've already solved this challenge.\n                  </p>\n                </div>\n              )}\n\n              <div className=\"mt-6 p-4 rounded-md bg-muted/50 border border-border\">\n                <p className=\"text-xs text-muted-foreground\">\n                  <strong>Hint:</strong> Flags typically follow the format flag{\"{\"}...{\"}\"}. Make sure to include the entire flag including the braces.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10789},"server/routes/install.routes.ts":{"content":"import { Router } from \"express\";\nimport { InstallService } from \"../services/install.service\";\nimport { requireAdminOnlyAfterInstall, requireAdmin } from \"../middleware/auth.middleware\";\nimport rateLimit from \"express-rate-limit\";\n\nconst router = Router();\n\nconst installLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 10,\n  message: \"Too many install attempts\",\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst maintenanceLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 20,\n  message: \"Too many maintenance requests\",\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nrouter.get(\"/system-check\", requireAdminOnlyAfterInstall, installLimiter, async (req, res) => {\n  try {\n    const systemCheck = await InstallService.checkSystem();\n    res.json(systemCheck);\n  } catch (error: any) {\n    console.error(\"System check error:\", error);\n    res.status(500).json({ \n      message: \"Failed to check system status\",\n      error: error.message \n    });\n  }\n});\n\nrouter.get(\"/check\", requireAdminOnlyAfterInstall, installLimiter, async (req, res) => {\n  try {\n    const systemCheck = await InstallService.checkSystem();\n    \n    res.json({\n      needsSetup: !systemCheck.isInstalled,\n      hasDatabase: systemCheck.hasDatabase,\n      databaseConnected: systemCheck.databaseConnected,\n      errors: systemCheck.errors,\n    });\n  } catch (error: any) {\n    console.error(\"Install check error:\", error);\n    res.status(500).json({ \n      message: \"Failed to check installation status\",\n      needsSetup: true,\n      hasDatabase: false,\n      errors: [error.message],\n    });\n  }\n});\n\nrouter.post(\"/setup\", installLimiter, async (req, res) => {\n  try {\n    const systemCheck = await InstallService.checkSystem();\n\n    if (systemCheck.isInstalled) {\n      return res.status(400).json({ \n        success: false,\n        message: \"System is already installed\" \n      });\n    }\n\n    const { adminUsername, adminPassword, siteName, siteDescription } = req.body;\n\n    if (!adminUsername || !adminPassword) {\n      return res.status(400).json({ \n        success: false,\n        message: \"Admin username and password are required\" \n      });\n    }\n\n    if (adminUsername.length < 3 || adminUsername.length > 50) {\n      return res.status(400).json({ \n        success: false,\n        message: \"Admin username must be between 3 and 50 characters\" \n      });\n    }\n\n    const result = await InstallService.performInstall({\n      adminUsername,\n      adminPassword,\n      siteName,\n      siteDescription,\n    });\n\n    if (result.success) {\n      res.json({\n        success: true,\n        message: result.message,\n      });\n    } else {\n      res.status(400).json({\n        success: false,\n        message: result.message,\n      });\n    }\n  } catch (error: any) {\n    console.error(\"Install setup error:\", error);\n    res.status(500).json({ \n      success: false,\n      message: \"Failed to complete installation\",\n      error: error.message \n    });\n  }\n});\n\nrouter.get(\"/health\", requireAdmin, maintenanceLimiter, async (req, res) => {\n  try {\n    const health = await InstallService.getSystemHealth();\n    res.json(health);\n  } catch (error: any) {\n    console.error(\"Health check error:\", error);\n    res.status(500).json({ \n      message: \"Failed to get system health\",\n      error: error.message \n    });\n  }\n});\n\nrouter.post(\"/seed-demo\", requireAdmin, maintenanceLimiter, async (req, res) => {\n  try {\n    await InstallService.seedDemoData();\n    res.json({ \n      success: true,\n      message: \"Demo data seeded successfully\" \n    });\n  } catch (error: any) {\n    console.error(\"Seed demo data error:\", error);\n    res.status(500).json({ \n      success: false,\n      message: \"Failed to seed demo data\",\n      error: error.message \n    });\n  }\n});\n\nrouter.post(\"/reset-demo\", requireAdmin, maintenanceLimiter, async (req, res) => {\n  try {\n    await InstallService.resetDemoData();\n    res.json({ \n      success: true,\n      message: \"Demo data reset successfully\" \n    });\n  } catch (error: any) {\n    console.error(\"Reset demo data error:\", error);\n    res.status(500).json({ \n      success: false,\n      message: \"Failed to reset demo data\",\n      error: error.message \n    });\n  }\n});\n\nexport default router;\n","size_bytes":4230},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/pages/Leaderboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Trophy, Medal, Award } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface LeaderboardEntry {\n  rank: number;\n  playerId: string;\n  username: string;\n  score: number;\n  solvedCount: number;\n}\n\nexport function Leaderboard() {\n  const { data: leaderboard, isLoading } = useQuery<LeaderboardEntry[]>({\n    queryKey: [\"/api/leaderboard\"],\n  });\n\n  const getRankIcon = (rank: number) => {\n    if (rank === 1) return <Trophy className=\"h-6 w-6 text-yellow-500\" />;\n    if (rank === 2) return <Medal className=\"h-6 w-6 text-gray-400\" />;\n    if (rank === 3) return <Award className=\"h-6 w-6 text-amber-700\" />;\n    return null;\n  };\n\n  const getRankBadge = (rank: number) => {\n    if (rank === 1) return <Badge className=\"bg-yellow-500 text-black\">1st</Badge>;\n    if (rank === 2) return <Badge className=\"bg-gray-400 text-black\">2nd</Badge>;\n    if (rank === 3) return <Badge className=\"bg-amber-700 text-white\">3rd</Badge>;\n    return <span className=\"text-muted-foreground font-mono text-sm\">#{rank}</span>;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6 max-w-4xl mx-auto\">\n        <Skeleton className=\"h-12 w-64\" />\n        <Card>\n          <CardContent className=\"p-6\">\n            {[1, 2, 3, 4, 5].map((i) => (\n              <div key={i} className=\"flex items-center gap-4 py-4\">\n                <Skeleton className=\"h-6 w-6 rounded-full\" />\n                <Skeleton className=\"h-6 w-32\" />\n                <Skeleton className=\"h-6 w-20 ml-auto\" />\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 max-w-4xl mx-auto\">\n      <div>\n        <h1 className=\"text-4xl font-serif font-bold mb-2\">Leaderboard</h1>\n        <p className=\"text-muted-foreground\">\n          Top players ranked by total points earned\n        </p>\n      </div>\n\n      {leaderboard && leaderboard.length > 0 ? (\n        <>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {leaderboard.slice(0, 3).map((entry) => (\n              <Card\n                key={entry.playerId}\n                className={`${\n                  entry.rank === 1\n                    ? \"border-yellow-500/50 bg-yellow-500/5\"\n                    : entry.rank === 2\n                    ? \"border-gray-400/50 bg-gray-400/5\"\n                    : \"border-amber-700/50 bg-amber-700/5\"\n                }`}\n                data-testid={`card-top-${entry.rank}`}\n              >\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"flex justify-center mb-3\">\n                    {getRankIcon(entry.rank)}\n                  </div>\n                  <h3 className=\"font-semibold text-lg mb-1\" data-testid={`text-username-${entry.rank}`}>\n                    {entry.username}\n                  </h3>\n                  <p className=\"text-3xl font-bold font-mono text-primary mb-1\" data-testid={`text-score-${entry.rank}`}>\n                    {entry.score}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {entry.solvedCount} challenges solved\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <Card>\n            <CardHeader>\n              <h2 className=\"text-xl font-semibold\">All Rankings</h2>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-border\">\n                      <th className=\"text-left py-3 px-4 font-semibold text-sm\">Rank</th>\n                      <th className=\"text-left py-3 px-4 font-semibold text-sm\">Player</th>\n                      <th className=\"text-right py-3 px-4 font-semibold text-sm\">Solved</th>\n                      <th className=\"text-right py-3 px-4 font-semibold text-sm\">Score</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {leaderboard.map((entry, index) => (\n                      <tr\n                        key={entry.playerId}\n                        className={`border-b border-border/50 hover-elevate ${\n                          index % 2 === 0 ? \"bg-muted/20\" : \"\"\n                        }`}\n                        data-testid={`row-player-${entry.playerId}`}\n                      >\n                        <td className=\"py-4 px-4\">\n                          <div className=\"flex items-center gap-2\">\n                            {getRankIcon(entry.rank)}\n                            {getRankBadge(entry.rank)}\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-4\">\n                          <span className=\"font-medium\" data-testid={`text-username-${entry.playerId}`}>\n                            {entry.username}\n                          </span>\n                        </td>\n                        <td className=\"py-4 px-4 text-right\">\n                          <span className=\"text-muted-foreground\" data-testid={`text-solved-${entry.playerId}`}>\n                            {entry.solvedCount}\n                          </span>\n                        </td>\n                        <td className=\"py-4 px-4 text-right\">\n                          <span className=\"font-mono font-bold text-primary\" data-testid={`text-score-${entry.playerId}`}>\n                            {entry.score}\n                          </span>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </>\n      ) : (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Trophy className=\"h-16 w-16 text-muted-foreground mx-auto mb-4 opacity-50\" />\n            <h2 className=\"text-xl font-semibold mb-2\">No Scores Yet</h2>\n            <p className=\"text-muted-foreground\">\n              Be the first to solve challenges and claim the top spot!\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":6382},"server/services/auth.service.ts":{"content":"import bcrypt from \"bcrypt\";\nimport { storage } from \"../storage\";\n\nconst SALT_ROUNDS = 12;\n\n/**\n * Authentication service with secure password handling\n */\nexport class AuthService {\n  /**\n   * Hash a plain text password securely\n   */\n  static async hashPassword(plainPassword: string): Promise<string> {\n    return await bcrypt.hash(plainPassword, SALT_ROUNDS);\n  }\n\n  /**\n   * Verify a password against a hash\n   */\n  static async verifyPassword(plainPassword: string, hash: string): Promise<boolean> {\n    return await bcrypt.compare(plainPassword, hash);\n  }\n\n  /**\n   * Validate password strength\n   */\n  static validatePasswordStrength(password: string): { valid: boolean; message?: string } {\n    if (password.length < 8) {\n      return { valid: false, message: \"Password must be at least 8 characters long\" };\n    }\n    if (!/[A-Z]/.test(password)) {\n      return { valid: false, message: \"Password must contain at least one uppercase letter\" };\n    }\n    if (!/[a-z]/.test(password)) {\n      return { valid: false, message: \"Password must contain at least one lowercase letter\" };\n    }\n    if (!/[0-9]/.test(password)) {\n      return { valid: false, message: \"Password must contain at least one number\" };\n    }\n    return { valid: true };\n  }\n}\n","size_bytes":1258},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ErrorBoundary.tsx":{"content":"import React, { Component, ErrorInfo, ReactNode } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertTriangle } from \"lucide-react\";\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  public static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Uncaught error:\", error, errorInfo);\n  }\n\n  private handleReset = () => {\n    this.setState({ hasError: false, error: undefined });\n    window.location.href = \"/\";\n  };\n\n  public render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n          <Card className=\"max-w-lg w-full\">\n            <CardHeader>\n              <div className=\"flex items-center gap-3\">\n                <AlertTriangle className=\"h-8 w-8 text-destructive\" />\n                <CardTitle className=\"text-2xl\">Something went wrong</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                We encountered an unexpected error. Please try refreshing the page or returning to the home page.\n              </p>\n              {this.state.error && (\n                <details className=\"text-sm\">\n                  <summary className=\"cursor-pointer text-muted-foreground hover:text-foreground\">\n                    Error details\n                  </summary>\n                  <pre className=\"mt-2 p-3 bg-muted rounded-md overflow-x-auto\">\n                    {this.state.error.message}\n                  </pre>\n                </details>\n              )}\n              <div className=\"flex gap-3\">\n                <Button onClick={() => window.location.reload()}>\n                  Refresh Page\n                </Button>\n                <Button variant=\"outline\" onClick={this.handleReset}>\n                  Go to Home\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","size_bytes":2503},"client/src/components/PageLoader.tsx":{"content":"import { Flag, Shield, Trophy } from \"lucide-react\";\n\nexport function PageLoader() {\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-background/80 backdrop-blur-sm\">\n      <div className=\"relative\">\n        {/* Outer rotating ring */}\n        <div className=\"absolute inset-0 w-32 h-32 border-4 border-primary/30 border-t-primary rounded-full animate-spin-slow\" />\n        \n        {/* Middle pulsing ring */}\n        <div className=\"absolute inset-4 w-24 h-24 border-4 border-chart-3/30 border-t-chart-3 rounded-full animate-spin-reverse\" />\n        \n        {/* Inner pulsing circle */}\n        <div className=\"absolute inset-8 w-16 h-16 bg-gradient-to-br from-primary via-chart-3 to-chart-5 rounded-full animate-pulse flex items-center justify-center\">\n          <Flag className=\"h-8 w-8 text-white animate-bounce\" />\n        </div>\n\n        {/* Orbiting icons */}\n        <div className=\"absolute inset-0 w-32 h-32 animate-spin-slow\">\n          <div className=\"absolute -top-2 left-1/2 -translate-x-1/2\">\n            <div className=\"bg-primary rounded-full p-2\">\n              <Shield className=\"h-4 w-4 text-white\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"absolute inset-0 w-32 h-32 animate-spin-reverse\">\n          <div className=\"absolute -bottom-2 left-1/2 -translate-x-1/2\">\n            <div className=\"bg-chart-5 rounded-full p-2\">\n              <Trophy className=\"h-4 w-4 text-white\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Loading text */}\n      <div className=\"absolute top-2/3 left-1/2 -translate-x-1/2 mt-8\">\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-lg font-semibold animate-pulse\">Loading</span>\n          <div className=\"flex gap-1\">\n            <span className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: \"0s\" }} />\n            <span className=\"w-2 h-2 bg-chart-3 rounded-full animate-bounce\" style={{ animationDelay: \"0.2s\" }} />\n            <span className=\"w-2 h-2 bg-chart-5 rounded-full animate-bounce\" style={{ animationDelay: \"0.4s\" }} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2212},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"server/routes/auth.routes.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { registerUserSchema, loginUserSchema } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\nimport rateLimit from \"express-rate-limit\";\n\nconst router = Router();\n\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 5,\n  message: \"Too many authentication attempts, please try again later\",\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nrouter.post(\"/register\", authLimiter, async (req, res) => {\n  try {\n    const result = registerUserSchema.safeParse(req.body);\n    if (!result.success) {\n      const validationError = fromZodError(result.error);\n      return res.status(400).json({ message: validationError.message });\n    }\n\n    const { username, email, password } = result.data;\n\n    const existingUsername = await storage.getPlayerByUsername(username);\n    if (existingUsername) {\n      return res.status(400).json({ message: \"Username already taken\" });\n    }\n\n    const existingEmail = await storage.getPlayerByEmail(email);\n    if (existingEmail) {\n      return res.status(400).json({ message: \"Email already registered\" });\n    }\n\n    const user = await storage.createPlayer({\n      username,\n      email,\n      passwordHash: password,\n    });\n\n    await new Promise<void>((resolve, reject) => {\n      req.session.regenerate((err) => {\n        if (err) return reject(err);\n        \n        req.session.userId = user.id;\n        req.session.username = user.username;\n        req.session.adminId = undefined;\n        req.session.adminUsername = undefined;\n        \n        req.session.save((saveErr) => {\n          if (saveErr) return reject(saveErr);\n          resolve();\n        });\n      });\n    });\n\n    res.status(201).json({\n      message: \"Registration successful\",\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        score: user.score,\n      },\n    });\n  } catch (error) {\n    console.error(\"Registration error:\", error);\n    res.status(500).json({ message: \"Failed to register\" });\n  }\n});\n\nrouter.post(\"/login\", authLimiter, async (req, res) => {\n  try {\n    const result = loginUserSchema.safeParse(req.body);\n    if (!result.success) {\n      const validationError = fromZodError(result.error);\n      return res.status(400).json({ message: validationError.message });\n    }\n\n    const { username, password } = result.data;\n\n    const isValid = await storage.verifyPlayerPassword(username, password);\n    if (!isValid) {\n      return res.status(401).json({ message: \"Invalid username or password\" });\n    }\n\n    const user = await storage.getPlayerByUsername(username);\n    if (!user) {\n      return res.status(401).json({ message: \"Invalid username or password\" });\n    }\n\n    await new Promise<void>((resolve, reject) => {\n      req.session.regenerate((err) => {\n        if (err) return reject(err);\n        \n        req.session.userId = user.id;\n        req.session.username = user.username;\n        req.session.adminId = undefined;\n        req.session.adminUsername = undefined;\n        \n        req.session.save((saveErr) => {\n          if (saveErr) return reject(saveErr);\n          resolve();\n        });\n      });\n    });\n\n    res.json({\n      message: \"Login successful\",\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        score: user.score,\n      },\n    });\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    res.status(500).json({ message: \"Failed to login\" });\n  }\n});\n\nrouter.post(\"/logout\", async (req, res) => {\n  try {\n    await new Promise<void>((resolve, reject) => {\n      req.session.destroy((err) => {\n        if (err) return reject(err);\n        res.clearCookie('connect.sid');\n        resolve();\n      });\n    });\n    \n    res.json({ message: \"Logout successful\" });\n  } catch (error) {\n    console.error(\"Logout error:\", error);\n    res.status(500).json({ message: \"Failed to logout\" });\n  }\n});\n\nrouter.get(\"/user\", async (req, res) => {\n  if (req.session && req.session.userId) {\n    try {\n      const user = await storage.getPlayerById(req.session.userId);\n      if (user) {\n        res.json({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          score: user.score,\n        });\n      } else {\n        res.status(404).json({ message: \"User not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  } else {\n    res.status(401).json({ message: \"Not authenticated\" });\n  }\n});\n\nexport default router;\n","size_bytes":4641},"server/routes/public.routes.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { requireUser } from \"../auth\";\n\nconst router = Router();\n\n// Universal logout - destroys entire session (both admin and user)\nrouter.post(\"/logout\", async (req, res) => {\n  req.session.destroy((err) => {\n    if (err) {\n      return res.status(500).json({ message: \"Failed to logout\" });\n    }\n    res.json({ message: \"Logout successful\" });\n  });\n});\n\n// Get solved challenges for current user\nrouter.get(\"/solved\", requireUser, async (req, res) => {\n  try {\n    const userId = req.session.userId!;\n\n    const submissions = await storage.getPlayerSubmissions(userId);\n    const solvedChallengeIds = submissions\n      .filter((sub) => sub.isCorrect === 1)\n      .map((sub) => sub.challengeId)\n      .filter((id, index, self) => self.indexOf(id) === index); // unique\n\n    res.json(solvedChallengeIds);\n  } catch (error) {\n    console.error(\"Error fetching solved challenges:\", error);\n    res.status(500).json({ message: \"Failed to fetch solved challenges\" });\n  }\n});\n\n// Get leaderboard\nrouter.get(\"/leaderboard\", async (req, res) => {\n  try {\n    const players = await storage.getAllPlayers();\n    const submissions = await storage.getAllSubmissions();\n\n    // Calculate solved count for each player\n    const leaderboard = players.map((player) => {\n      const playerSubmissions = submissions.filter(\n        (sub) => sub.playerId === player.id && sub.isCorrect === 1\n      );\n      const uniqueSolvedChallenges = new Set(\n        playerSubmissions.map((sub) => sub.challengeId)\n      );\n\n      return {\n        playerId: player.id,\n        username: player.username,\n        score: player.score,\n        solvedCount: uniqueSolvedChallenges.size,\n      };\n    });\n\n    // Sort by score (descending) and add rank\n    leaderboard.sort((a, b) => b.score - a.score);\n    const rankedLeaderboard = leaderboard.map((entry, index) => ({\n      ...entry,\n      rank: index + 1,\n    }));\n\n    res.json(rankedLeaderboard);\n  } catch (error) {\n    console.error(\"Error fetching leaderboard:\", error);\n    res.status(500).json({ message: \"Failed to fetch leaderboard\" });\n  }\n});\n\nexport default router;\n","size_bytes":2174},"client/src/pages/Register.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { UserPlus } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Link, useLocation } from \"wouter\";\n\nexport function Register() {\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: { username: string; email: string; password: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Registration Successful\",\n        description: \"Welcome to the CTF competition!\",\n      });\n      // Reload page to reset app state completely\n      window.location.href = \"/\";\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!username.trim() || !email.trim() || !password) return;\n    registerMutation.mutate({ username, email, password });\n  };\n\n  return (\n    <div className=\"min-h-[80vh] flex items-center justify-center\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-4 text-center\">\n          <div className=\"flex justify-center\">\n            <div className=\"rounded-full bg-primary/10 p-4\">\n              <UserPlus className=\"h-10 w-10 text-primary\" />\n            </div>\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-serif font-bold\">Register</h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Create an account to participate in the CTF competition\n            </p>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">\n                Username\n              </label>\n              <Input\n                type=\"text\"\n                placeholder=\"Enter username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                disabled={registerMutation.isPending}\n                data-testid=\"input-username\"\n                minLength={3}\n                maxLength={50}\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">\n                Email\n              </label>\n              <Input\n                type=\"email\"\n                placeholder=\"Enter email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                disabled={registerMutation.isPending}\n                data-testid=\"input-email\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">\n                Password\n              </label>\n              <Input\n                type=\"password\"\n                placeholder=\"Enter password (min 6 characters)\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                disabled={registerMutation.isPending}\n                data-testid=\"input-password\"\n                minLength={6}\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full gap-2\"\n              disabled={registerMutation.isPending || !username.trim() || !email.trim() || !password}\n              data-testid=\"button-register\"\n            >\n              <UserPlus className=\"h-4 w-4\" />\n              {registerMutation.isPending ? \"Creating account...\" : \"Register\"}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\">\n                <a className=\"text-primary hover:underline font-medium\">\n                  Login here\n                </a>\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4608},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ErrorBoundary } from \"@/components/ErrorBoundary\";\nimport { Layout } from \"@/components/Layout\";\nimport { PageLoader } from \"@/components/PageLoader\";\nimport { ChallengeList } from \"@/pages/ChallengeList\";\nimport { ChallengeDetail } from \"@/pages/ChallengeDetail\";\nimport { Leaderboard } from \"@/pages/Leaderboard\";\nimport { Admin } from \"@/pages/Admin\";\nimport { AdminLogin } from \"@/pages/AdminLogin\";\nimport { Register } from \"@/pages/Register\";\nimport { Login } from \"@/pages/Login\";\nimport Install from \"@/pages/Install\";\nimport NotFound from \"@/pages/not-found\";\nimport { useState, useEffect } from \"react\";\n\nfunction Router() {\n  const [location] = useLocation();\n  const isAdminRoute = location.startsWith('/admin');\n  const isInstallRoute = location.startsWith('/install');\n\n  if (isInstallRoute) {\n    return (\n      <Switch>\n        <Route path=\"/install\" component={Install} />\n        <Route component={NotFound} />\n      </Switch>\n    );\n  }\n\n  if (isAdminRoute) {\n    return (\n      <Switch>\n        <Route path=\"/admin/login\" component={AdminLogin} />\n        <Route path=\"/admin\" component={Admin} />\n        <Route component={NotFound} />\n      </Switch>\n    );\n  }\n\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={ChallengeList} />\n        <Route path=\"/challenge/:id\" component={ChallengeDetail} />\n        <Route path=\"/leaderboard\" component={Leaderboard} />\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/login\" component={Login} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  const [initialLoading, setInitialLoading] = useState(true);\n\n  useEffect(() => {\n    // Show initial loading animation only once\n    const timer = setTimeout(() => {\n      setInitialLoading(false);\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  if (initialLoading) {\n    return <PageLoader />;\n  }\n\n  return (\n    <ErrorBoundary>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Router />\n          <Toaster />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","size_bytes":2463},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"server/storage.ts":{"content":"import {\n  type Challenge,\n  type InsertChallenge,\n  type Player,\n  type InsertPlayer,\n  type Submission,\n  type InsertSubmission,\n  type AdminUser,\n  type InsertAdminUser,\n  type Announcement,\n  type InsertAnnouncement,\n  type Setting,\n  type InsertSetting,\n  challenges,\n  players,\n  submissions,\n  adminUsers,\n  announcements,\n  settings,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport { AuthService } from \"./services/auth.service\";\n\nexport interface IStorage {\n  // Challenge methods\n  getAllChallenges(): Promise<Challenge[]>;\n  getChallengeById(id: string): Promise<Challenge | undefined>;\n  createChallenge(challenge: InsertChallenge): Promise<Challenge>;\n  updateChallenge(id: string, challenge: InsertChallenge): Promise<Challenge | undefined>;\n  deleteChallenge(id: string): Promise<boolean>;\n\n  // Player/User methods (for CTF participants)\n  getPlayerById(id: string): Promise<Player | undefined>;\n  getPlayerByUsername(username: string): Promise<Player | undefined>;\n  getPlayerByEmail(email: string): Promise<Player | undefined>;\n  createPlayer(player: InsertPlayer): Promise<Player>;\n  updatePlayerScore(playerId: string, newScore: number): Promise<void>;\n  getAllPlayers(): Promise<Player[]>;\n  verifyPlayerPassword(username: string, password: string): Promise<boolean>;\n\n  // Submission methods\n  createSubmission(submission: InsertSubmission): Promise<Submission>;\n  getPlayerSubmissions(playerId: string): Promise<Submission[]>;\n  getAllSubmissions(): Promise<Submission[]>;\n\n  // Admin methods\n  getAdminByUsername(username: string): Promise<AdminUser | undefined>;\n  getAllAdmins(): Promise<AdminUser[]>;\n  createAdmin(admin: InsertAdminUser): Promise<AdminUser>;\n  verifyAdminPassword(username: string, password: string): Promise<boolean>;\n\n  // Announcement methods\n  getAllAnnouncements(): Promise<Announcement[]>;\n  getActiveAnnouncements(): Promise<Announcement[]>;\n  getAnnouncementById(id: string): Promise<Announcement | undefined>;\n  createAnnouncement(announcement: InsertAnnouncement): Promise<Announcement>;\n  updateAnnouncement(id: string, announcement: Partial<InsertAnnouncement>): Promise<Announcement | undefined>;\n  deleteAnnouncement(id: string): Promise<boolean>;\n\n  // Settings methods\n  getSetting(key: string): Promise<Setting | undefined>;\n  setSetting(key: string, value: string): Promise<Setting>;\n  getAllSettings(): Promise<Setting[]>;\n  deleteSetting(key: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Challenge methods\n  async getAllChallenges(): Promise<Challenge[]> {\n    return await db.select().from(challenges);\n  }\n\n  async getChallengeById(id: string): Promise<Challenge | undefined> {\n    const [challenge] = await db.select().from(challenges).where(eq(challenges.id, id));\n    return challenge;\n  }\n\n  async createChallenge(insertChallenge: InsertChallenge): Promise<Challenge> {\n    const [challenge] = await db\n      .insert(challenges)\n      .values(insertChallenge)\n      .returning();\n    return challenge;\n  }\n\n  async updateChallenge(\n    id: string,\n    insertChallenge: InsertChallenge\n  ): Promise<Challenge | undefined> {\n    const [challenge] = await db\n      .update(challenges)\n      .set(insertChallenge)\n      .where(eq(challenges.id, id))\n      .returning();\n    return challenge;\n  }\n\n  async deleteChallenge(id: string): Promise<boolean> {\n    const result = await db.delete(challenges).where(eq(challenges.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Player/User methods (for CTF participants)\n  async getPlayerById(id: string): Promise<Player | undefined> {\n    const [player] = await db.select().from(players).where(eq(players.id, id));\n    return player;\n  }\n\n  async getPlayerByUsername(username: string): Promise<Player | undefined> {\n    const [player] = await db.select().from(players).where(eq(players.username, username));\n    return player;\n  }\n\n  async getPlayerByEmail(email: string): Promise<Player | undefined> {\n    const [player] = await db.select().from(players).where(eq(players.email, email));\n    return player;\n  }\n\n  async createPlayer(insertPlayer: InsertPlayer): Promise<Player> {\n    // Hash password before storing using AuthService (12 rounds)\n    const passwordHash = await AuthService.hashPassword(insertPlayer.passwordHash);\n    const [player] = await db\n      .insert(players)\n      .values({\n        ...insertPlayer,\n        passwordHash,\n      })\n      .returning();\n    return player;\n  }\n\n  async updatePlayerScore(playerId: string, newScore: number): Promise<void> {\n    await db\n      .update(players)\n      .set({ score: newScore })\n      .where(eq(players.id, playerId));\n  }\n\n  async getAllPlayers(): Promise<Player[]> {\n    return await db.select().from(players);\n  }\n\n  async verifyPlayerPassword(username: string, password: string): Promise<boolean> {\n    const player = await this.getPlayerByUsername(username);\n    if (!player) {\n      return false;\n    }\n    return await AuthService.verifyPassword(password, player.passwordHash);\n  }\n\n  // Submission methods\n  async createSubmission(insertSubmission: InsertSubmission): Promise<Submission> {\n    const [submission] = await db\n      .insert(submissions)\n      .values(insertSubmission)\n      .returning();\n    return submission;\n  }\n\n  async getPlayerSubmissions(playerId: string): Promise<Submission[]> {\n    return await db\n      .select()\n      .from(submissions)\n      .where(eq(submissions.playerId, playerId));\n  }\n\n  async getAllSubmissions(): Promise<Submission[]> {\n    return await db.select().from(submissions);\n  }\n\n  // Admin methods\n  async getAdminByUsername(username: string): Promise<AdminUser | undefined> {\n    const [admin] = await db\n      .select()\n      .from(adminUsers)\n      .where(eq(adminUsers.username, username));\n    return admin;\n  }\n\n  async getAllAdmins(): Promise<AdminUser[]> {\n    return await db.select().from(adminUsers);\n  }\n\n  async createAdmin(insertAdmin: InsertAdminUser): Promise<AdminUser> {\n    const [admin] = await db\n      .insert(adminUsers)\n      .values(insertAdmin)\n      .returning();\n    return admin;\n  }\n\n  async verifyAdminPassword(username: string, password: string): Promise<boolean> {\n    const admin = await this.getAdminByUsername(username);\n    if (!admin) {\n      return false;\n    }\n    return await AuthService.verifyPassword(password, admin.passwordHash);\n  }\n\n  // Announcement methods\n  async getAllAnnouncements(): Promise<Announcement[]> {\n    return await db\n      .select()\n      .from(announcements)\n      .orderBy(announcements.createdAt);\n  }\n\n  async getActiveAnnouncements(): Promise<Announcement[]> {\n    return await db\n      .select()\n      .from(announcements)\n      .where(eq(announcements.isActive, 1))\n      .orderBy(announcements.createdAt);\n  }\n\n  async getAnnouncementById(id: string): Promise<Announcement | undefined> {\n    const [announcement] = await db\n      .select()\n      .from(announcements)\n      .where(eq(announcements.id, id));\n    return announcement;\n  }\n\n  async createAnnouncement(insertAnnouncement: InsertAnnouncement): Promise<Announcement> {\n    const [announcement] = await db\n      .insert(announcements)\n      .values(insertAnnouncement)\n      .returning();\n    return announcement;\n  }\n\n  async updateAnnouncement(\n    id: string,\n    updateData: Partial<InsertAnnouncement>\n  ): Promise<Announcement | undefined> {\n    const [announcement] = await db\n      .update(announcements)\n      .set(updateData)\n      .where(eq(announcements.id, id))\n      .returning();\n    return announcement;\n  }\n\n  async deleteAnnouncement(id: string): Promise<boolean> {\n    const result = await db\n      .delete(announcements)\n      .where(eq(announcements.id, id));\n    return true;\n  }\n\n  // Settings methods\n  async getSetting(key: string): Promise<Setting | undefined> {\n    const [setting] = await db\n      .select()\n      .from(settings)\n      .where(eq(settings.key, key));\n    return setting;\n  }\n\n  async setSetting(key: string, value: string): Promise<Setting> {\n    const existing = await this.getSetting(key);\n    if (existing) {\n      const [updated] = await db\n        .update(settings)\n        .set({ value, updatedAt: new Date() })\n        .where(eq(settings.key, key))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(settings)\n        .values({ key, value })\n        .returning();\n      return created;\n    }\n  }\n\n  async getAllSettings(): Promise<Setting[]> {\n    return await db.select().from(settings);\n  }\n\n  async deleteSetting(key: string): Promise<boolean> {\n    await db.delete(settings).where(eq(settings.key, key));\n    return true;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8749},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport helmet from \"helmet\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.set(\"trust proxy\", 1);\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: isDevelopment \n        ? [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"]\n        : [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\"'self'\"],\n      frameAncestors: [\"'none'\"],\n      baseUri: [\"'self'\"],\n      formAction: [\"'self'\"],\n    },\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true,\n  },\n  frameguard: {\n    action: \"deny\",\n  },\n  noSniff: true,\n  xssFilter: true,\n  referrerPolicy: {\n    policy: \"strict-origin-when-cross-origin\",\n  },\n}));\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    const server = await registerRoutes(app);\n\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = isDevelopment ? err.message || \"Internal Server Error\" : \"Internal Server Error\";\n      \n      if (isDevelopment) {\n        console.error(\"Error:\", err);\n      } else {\n        console.error(\"Error occurred:\", message);\n      }\n\n      if (!res.headersSent) {\n        res.status(status).json({ message });\n      }\n    });\n\n    if (app.get(\"env\") === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    const PORT = 5000;\n    const HOST = \"0.0.0.0\";\n    \n    server.listen(PORT, HOST, () => {\n      log(`‚úÖ Server successfully started on http://${HOST}:${PORT}`);\n    });\n  } catch (error) {\n    log(`‚ùå Server startup error: ${error}`);\n    process.exit(1);\n  }\n})();\n","size_bytes":2862},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"replit.md":{"content":"# CTF Platform\n\n## Overview\n\nA modern, enterprise-grade Capture The Flag (CTF) platform for hosting cybersecurity challenges. The platform enables players to browse challenges across multiple categories (Web, Crypto, Forensics, Binary, Reverse), submit flags, track progress on a leaderboard, and receive platform-wide announcements. Administrators can manage challenges, announcements, and view player analytics through a dedicated admin dashboard.\n\n**Latest Update (October 2025):** Comprehensive security hardening with enterprise-level protections, installation wizard, and database management tools.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n\n### Security Enhancements (October 2025)\n- **CRITICAL**: Fixed CSRF bypass vulnerability - now enforces strict double-submit cookie pattern in all environments\n- **CRITICAL**: Fixed session fixation vulnerability - sessions regenerated on login/logout\n- **NEW**: Strong password validation (8+ chars, uppercase, lowercase, numbers) enforced in registration schema\n- **NEW**: Admin login now uses Zod validation schema with strict input sanitization\n- **IMPROVED**: Error handling no longer leaks stack traces in production\n- **IMPROVED**: Sample data initialization race condition fixed with proper async/await\n- **IMPROVED**: Install page with guided setup for first-time deployment\n\n### New Features\n- **Installation Wizard**: `/install` route provides guided setup with database checks and admin account creation\n- **Database Management**: Backup and export scripts for data portability\n  - `npm run db:backup` - Creates JSON backup with metadata\n  - `npm run db:export` - Exports SQL dump for migration\n- **Enhanced Rate Limiting**: Configurable limits on authentication and flag submission endpoints\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- React 18 with TypeScript for type safety\n- Vite as the build tool for fast development and optimized production builds\n- TanStack Query (React Query) for server state management and caching\n- Wouter for lightweight client-side routing (2kb alternative to React Router)\n- Radix UI components for accessible, unstyled UI primitives\n- Tailwind CSS for utility-first styling with custom design system\n\n**Component Organization:**\n- Page components in `client/src/pages/`:\n  - Core: ChallengeList, ChallengeDetail, Leaderboard\n  - Auth: Login, Register, AdminLogin\n  - Admin: Admin (dashboard)\n  - Setup: **Install** (new - guided installation)\n- Reusable UI components in `client/src/components/`\n- Shadcn UI component library in `client/src/components/ui/`\n- Custom hooks in `client/src/hooks/` for authentication state\n\n**State Management Strategy:**\n- TanStack Query handles all server state with automatic caching\n- URL-based query keys for simplicity\n- No global client-side state management\n- Local component state for UI-specific concerns\n\n**Security on Frontend:**\n- **CSRF tokens**: Automatically included in all POST/PUT/DELETE/PATCH requests via custom `apiRequest` helper\n- **XSS Protection**: Markdown rendering with DOMPurify sanitization\n- **Input Validation**: Client-side validation before submission\n- **Separate Auth Flows**: Distinct authentication paths for users and admins\n\n### Backend Architecture\n\n**Technology Stack:**\n- Express.js for HTTP server and API routing\n- TypeScript with ES modules\n- Drizzle ORM for type-safe database queries\n- PostgreSQL via node-postgres (pg) driver\n- Bcrypt for password hashing (12 salt rounds)\n- Helmet for security headers\n- Express-session with PostgreSQL storage\n\n**API Structure:**\n- Modular route organization in `server/routes/`:\n  - `auth.routes.ts` - User registration and login (with session regeneration)\n  - `admin.routes.ts` - Admin authentication and protected admin endpoints\n  - `challenge.routes.ts` - Challenge CRUD and flag submission\n  - `announcement.routes.ts` - Announcement management\n  - `public.routes.ts` - Leaderboard, logout, solved challenges\n  - **`install.routes.ts`** (new) - Installation and setup endpoints\n- Rate limiting:\n  - Authentication: 5 attempts/15min (users), 3 attempts/15min (admins)\n  - Flag submissions: 10 attempts/minute\n  - Install: 10 attempts/15min\n\n**Authentication & Authorization:**\n- **Session Regeneration**: Sessions regenerated on login/logout to prevent fixation attacks\n- **Dual Authentication**: Separate sessions for users and admins\n- **Session Storage**: PostgreSQL-backed via connect-pg-simple\n- **Password Hashing**: Bcrypt with 12 salt rounds\n- **Password Strength**: Enforced via Zod schema (8+ chars, mixed case, numbers)\n- **Session Config**: 1-week TTL, HTTP-only cookies, strict SameSite, secure in production\n- **Privilege Separation**: Admin session clears user session and vice versa\n\n**Security Implementation (ENTERPRISE GRADE):**\n\n1. **CSRF Protection (FIXED)**:\n   - Double-submit cookie pattern with strict enforcement\n   - Requires both cookie AND header token on all state-changing requests\n   - No bypass allowed - rejects requests without matching tokens\n   - Cookie set on first GET request, validated on POST/PUT/DELETE/PATCH\n\n2. **Session Security (FIXED)**:\n   - Session ID regeneration on privilege changes (login/logout)\n   - Prevents session fixation attacks\n   - Automatic session cleanup on logout\n   - Cookie clearing on session destroy\n\n3. **Input Validation**:\n   - Zod schemas for all user inputs\n   - Admin login uses `loginAdminSchema` with strict bounds\n   - User registration uses `registerUserSchema` with password strength validation\n   - All validation errors return user-friendly messages via `fromZodError`\n\n4. **Error Handling**:\n   - Stack traces hidden in production\n   - Generic error messages for clients\n   - Detailed logging for developers (console only)\n   - No information disclosure via error responses\n\n5. **Security Headers (Helmet.js)**:\n   - Content Security Policy (stricter in production)\n   - HSTS with 1-year max-age and preload\n   - XSS filter enabled\n   - MIME sniffing prevention\n   - Clickjacking protection (frameAncestors: none)\n   - Referrer policy: strict-origin-when-cross-origin\n\n6. **SQL Injection Prevention**:\n   - Parameterized queries via Drizzle ORM\n   - No raw SQL concatenation\n   - Type-safe query builders\n\n7. **Rate Limiting**:\n   - Express-rate-limit on sensitive endpoints\n   - Per-IP tracking with proxy trust\n   - Configurable windows and thresholds\n\n**Database Management:**\n- **Initialization**: Automatic sample data seeding with race condition protection\n- **Backup System**: JSON backup with statistics (`npm run db:backup`)\n- **Export System**: SQL dump for migrations (`npm run db:export`)\n- **Schema Management**: Drizzle Kit for schema synchronization\n\n### Data Storage\n\n**Database Technology:**\n- PostgreSQL as primary database\n- Drizzle ORM for schema definition and type-safe queries\n- Schema defined in `shared/schema.ts` for type sharing\n\n**Database Schema:**\n- `challenges` - CTF challenges with flags\n- `players` - User accounts with scores\n- `submissions` - Flag submission history\n- `admin_users` - Admin accounts (separate from players)\n- `sessions` - Session storage\n- `announcements` - Platform announcements\n\n**Data Access Pattern:**\n- Repository pattern via `IStorage` interface\n- All database operations abstracted through storage methods\n- UUID primary keys via PostgreSQL `gen_random_uuid()`\n- Sample data initialization with existence check\n\n### External Dependencies\n\n**Required Environment Variables:**\n- `DATABASE_URL` - PostgreSQL connection string\n- `SESSION_SECRET` - Session encryption secret\n- `NODE_ENV` - Environment (development/production)\n\n**Security Dependencies:**\n- Helmet.js - HTTP security headers\n- Bcrypt - Password hashing\n- DOMPurify - HTML sanitization\n- Zod - Schema validation\n- Express-rate-limit - Rate limiting\n\n**UI Libraries:**\n- Radix UI - Accessible component primitives\n- Tailwind CSS - Utility-first styling\n- Lucide React - Icons\n\n## Installation & Setup\n\n### First-Time Setup\n\n1. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n2. **Configure Environment**:\n   - Ensure `DATABASE_URL` is set (automatically provided by Replit)\n   - Ensure `SESSION_SECRET` is set (automatically provided by Replit)\n\n3. **Initialize Database**:\n   ```bash\n   npm run db:push\n   ```\n\n4. **Run Application**:\n   ```bash\n   npm run dev\n   ```\n\n5. **Complete Setup**:\n   - Navigate to `/install` in your browser\n   - Follow the guided installation wizard\n   - Create your first admin account\n   - System is ready to use!\n\n### Database Management\n\n**Backup Database** (JSON format with metadata):\n```bash\nnpm run db:backup\n```\nCreates: `backups/ctf-backup-TIMESTAMP.json`\n\n**Export Database** (SQL dump for migration):\n```bash\nnpm run db:export\n```\nCreates: `exports/ctf-export-TIMESTAMP.sql`\n\n**Push Schema Changes**:\n```bash\nnpm run db:push\n```\n\n### Development vs Production\n\n**Development Mode**:\n- Runs on port 5000\n- Hot module replacement via Vite\n- Detailed error messages\n- Relaxed CSP for dev tools\n\n**Production Mode**:\n1. Build application:\n   ```bash\n   npm run build\n   ```\n\n2. Start production server:\n   ```bash\n   npm start\n   ```\n\nProduction features:\n- Static file serving from `dist/public/`\n- Strict CSP\n- Generic error messages\n- HTTPS enforcement (secure cookies)\n- Stack trace hiding\n\n## Security Best Practices\n\n1. **Always use HTTPS in production** - Replit provides this automatically\n2. **Rotate SESSION_SECRET regularly** - Change via environment variables\n3. **Backup database before major changes** - Use `npm run db:backup`\n4. **Monitor rate limit logs** - Check for unusual authentication attempts\n5. **Review admin accounts periodically** - Ensure only authorized users have access\n6. **Keep dependencies updated** - Run `npm audit` regularly\n\n## Deployment\n\nConfigured for Replit deployment with:\n- Automatic workflow setup\n- Environment variable management\n- PostgreSQL database provisioning\n- Port 5000 binding with 0.0.0.0 host\n\nFor manual deployment or other platforms:\n- Set `DATABASE_URL` and `SESSION_SECRET`\n- Run `npm run build` and `npm start`\n- Ensure PostgreSQL database is accessible\n- Configure reverse proxy for HTTPS\n\n## Troubleshooting\n\n**Database Connection Issues**:\n- Check `DATABASE_URL` environment variable\n- Verify PostgreSQL is running\n- Test connection with `npm run db:push`\n\n**Session Problems**:\n- Ensure `SESSION_SECRET` is set\n- Check PostgreSQL session table exists\n- Verify cookies are enabled in browser\n\n**Installation Wizard Not Working**:\n- Check `/api/install/check` endpoint\n- Verify database connectivity\n- Check server logs for errors\n\n**CSRF Token Errors** (in production):\n- Clear browser cookies\n- Ensure JavaScript is enabled\n- Check network requests include `x-csrf-token` header\n","size_bytes":10806},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/node-postgres';\nimport pkg from 'pg';\nconst { Pool } = pkg;\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL\n});\n\nexport const db = drizzle(pool, { schema });\n","size_bytes":400},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/pages/Install.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Shield, Database, CheckCircle, AlertCircle, Server, Settings, Loader2 } from \"lucide-react\";\n\ninterface SystemCheck {\n  hasDatabase: boolean;\n  databaseConnected: boolean;\n  hasSessionSecret: boolean;\n  hasDatabaseUrl: boolean;\n  isInstalled: boolean;\n  adminCount: number;\n  challengeCount: number;\n  playerCount: number;\n  errors: string[];\n}\n\nexport default function Install() {\n  const [, setLocation] = useLocation();\n  const [step, setStep] = useState<\"check\" | \"config\" | \"installing\" | \"complete\">(\"check\");\n  const [adminUsername, setAdminUsername] = useState(\"\");\n  const [adminPassword, setAdminPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [siteName, setSiteName] = useState(\"CTF Platform\");\n  const [siteDescription, setSiteDescription] = useState(\"Capture The Flag Competition\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [systemCheck, setSystemCheck] = useState<SystemCheck | null>(null);\n  const [installProgress, setInstallProgress] = useState(0);\n\n  useEffect(() => {\n    if (step === \"check\") {\n      performSystemCheck();\n    }\n  }, [step]);\n\n  const performSystemCheck = async () => {\n    try {\n      setLoading(true);\n      const res = await fetch(\"/api/install/system-check\");\n      const data = await res.json();\n      \n      setSystemCheck(data);\n\n      if (data.isInstalled) {\n        setStep(\"complete\");\n      } else if (data.databaseConnected && data.errors.length === 0) {\n        setStep(\"config\");\n      }\n    } catch (err: any) {\n      setError(\"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn h·ªá th·ªëng. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.\");\n      setSystemCheck({\n        hasDatabase: false,\n        databaseConnected: false,\n        hasSessionSecret: false,\n        hasDatabaseUrl: false,\n        isInstalled: false,\n        adminCount: 0,\n        challengeCount: 0,\n        playerCount: 0,\n        errors: [err.message],\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInstall = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n\n    if (adminPassword !== confirmPassword) {\n      setError(\"M·∫≠t kh·∫©u kh√¥ng kh·ªõp\");\n      return;\n    }\n\n    if (adminPassword.length < 8) {\n      setError(\"M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±\");\n      return;\n    }\n\n    if (!/[A-Z]/.test(adminPassword)) {\n      setError(\"M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ HOA\");\n      return;\n    }\n\n    if (!/[a-z]/.test(adminPassword)) {\n      setError(\"M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng\");\n      return;\n    }\n\n    if (!/[0-9]/.test(adminPassword)) {\n      setError(\"M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 s·ªë\");\n      return;\n    }\n\n    setStep(\"installing\");\n    setLoading(true);\n    setInstallProgress(0);\n\n    try {\n      const progressInterval = setInterval(() => {\n        setInstallProgress(prev => {\n          if (prev >= 90) {\n            clearInterval(progressInterval);\n            return 90;\n          }\n          return prev + 10;\n        });\n      }, 300);\n\n      const res = await fetch(\"/api/install/setup\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          adminUsername,\n          adminPassword,\n          siteName,\n          siteDescription,\n        }),\n      });\n\n      const data = await res.json();\n\n      clearInterval(progressInterval);\n      setInstallProgress(100);\n\n      if (!res.ok || !data.success) {\n        throw new Error(data.message || \"C√†i ƒë·∫∑t th·∫•t b·∫°i\");\n      }\n\n      setTimeout(() => {\n        setStep(\"complete\");\n      }, 500);\n    } catch (err: any) {\n      setError(err.message || \"ƒê√£ x·∫£y ra l·ªói khi c√†i ƒë·∫∑t\");\n      setStep(\"config\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (step === \"check\") {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 p-4\">\n        <Card className=\"w-full max-w-2xl bg-gray-800/50 border-gray-700 backdrop-blur\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <Server className=\"h-16 w-16 text-blue-500\" />\n            </div>\n            <CardTitle className=\"text-3xl text-white\">Ki·ªÉm Tra H·ªá Th·ªëng</CardTitle>\n            <CardDescription className=\"text-gray-300\">\n              ƒêang ki·ªÉm tra c√†i ƒë·∫∑t v√† k·∫øt n·ªëi h·ªá th·ªëng...\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"h-8 w-8 animate-spin text-blue-500\" />\n              </div>\n            ) : systemCheck ? (\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-3 p-3 bg-gray-700/50 rounded-lg\">\n                  {systemCheck.hasDatabaseUrl ? (\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  ) : (\n                    <AlertCircle className=\"h-5 w-5 text-red-500\" />\n                  )}\n                  <span className=\"text-gray-200\">DATABASE_URL: {systemCheck.hasDatabaseUrl ? \"C√≥\" : \"Kh√¥ng c√≥\"}</span>\n                </div>\n                \n                <div className=\"flex items-center gap-3 p-3 bg-gray-700/50 rounded-lg\">\n                  {systemCheck.hasSessionSecret ? (\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  ) : (\n                    <AlertCircle className=\"h-5 w-5 text-red-500\" />\n                  )}\n                  <span className=\"text-gray-200\">SESSION_SECRET: {systemCheck.hasSessionSecret ? \"C√≥\" : \"Kh√¥ng c√≥\"}</span>\n                </div>\n\n                <div className=\"flex items-center gap-3 p-3 bg-gray-700/50 rounded-lg\">\n                  {systemCheck.databaseConnected ? (\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  ) : (\n                    <AlertCircle className=\"h-5 w-5 text-red-500\" />\n                  )}\n                  <span className=\"text-gray-200\">K·∫øt n·ªëi Database: {systemCheck.databaseConnected ? \"Th√†nh c√¥ng\" : \"Th·∫•t b·∫°i\"}</span>\n                </div>\n\n                {systemCheck.errors.length > 0 && (\n                  <Alert variant=\"destructive\" className=\"bg-red-900/20 border-red-800\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription className=\"text-sm\">\n                      {systemCheck.errors.map((err, i) => (\n                        <div key={i}>‚Ä¢ {err}</div>\n                      ))}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                {systemCheck.databaseConnected && !systemCheck.isInstalled && (\n                  <div className=\"mt-6\">\n                    <Button \n                      onClick={() => setStep(\"config\")}\n                      className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                    >\n                      Ti·∫øp t·ª•c c√†i ƒë·∫∑t\n                    </Button>\n                  </div>\n                )}\n\n                {systemCheck.errors.length > 0 && (\n                  <div className=\"mt-4\">\n                    <Button \n                      onClick={performSystemCheck}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                    >\n                      Ki·ªÉm tra l·∫°i\n                    </Button>\n                  </div>\n                )}\n              </div>\n            ) : null}\n\n            {error && (\n              <Alert variant=\"destructive\" className=\"bg-red-900/20 border-red-800\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (step === \"config\") {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 p-4\">\n        <Card className=\"w-full max-w-2xl bg-gray-800/50 border-gray-700 backdrop-blur\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <Settings className=\"h-16 w-16 text-blue-500\" />\n            </div>\n            <CardTitle className=\"text-3xl text-white\">C·∫•u H√¨nh H·ªá Th·ªëng</CardTitle>\n            <CardDescription className=\"text-gray-300\">\n              Thi·∫øt l·∫≠p th√¥ng tin website v√† t√†i kho·∫£n qu·∫£n tr·ªã\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleInstall} className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-gray-700/50 rounded-lg space-y-4\">\n                  <h3 className=\"font-semibold text-white flex items-center gap-2\">\n                    <Database className=\"h-5 w-5 text-blue-500\" />\n                    Th√¥ng Tin Website\n                  </h3>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"siteName\" className=\"text-gray-200\">T√™n Website</Label>\n                    <Input\n                      id=\"siteName\"\n                      type=\"text\"\n                      value={siteName}\n                      onChange={(e) => setSiteName(e.target.value)}\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                      placeholder=\"CTF Platform\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"siteDescription\" className=\"text-gray-200\">M√¥ T·∫£ Website</Label>\n                    <Input\n                      id=\"siteDescription\"\n                      type=\"text\"\n                      value={siteDescription}\n                      onChange={(e) => setSiteDescription(e.target.value)}\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                      placeholder=\"Capture The Flag Competition\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-gray-700/50 rounded-lg space-y-4\">\n                  <h3 className=\"font-semibold text-white flex items-center gap-2\">\n                    <Shield className=\"h-5 w-5 text-green-500\" />\n                    T√†i Kho·∫£n Qu·∫£n Tr·ªã\n                  </h3>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"adminUsername\" className=\"text-gray-200\">T√™n ƒëƒÉng nh·∫≠p Admin</Label>\n                    <Input\n                      id=\"adminUsername\"\n                      type=\"text\"\n                      value={adminUsername}\n                      onChange={(e) => setAdminUsername(e.target.value)}\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                      placeholder=\"admin\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"adminPassword\" className=\"text-gray-200\">M·∫≠t kh·∫©u Admin</Label>\n                    <Input\n                      id=\"adminPassword\"\n                      type=\"password\"\n                      value={adminPassword}\n                      onChange={(e) => setAdminPassword(e.target.value)}\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                      placeholder=\"T·ªëi thi·ªÉu 8 k√Ω t·ª±, bao g·ªìm ch·ªØ hoa, ch·ªØ th∆∞·ªùng v√† s·ªë\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirmPassword\" className=\"text-gray-200\">X√°c nh·∫≠n m·∫≠t kh·∫©u</Label>\n                    <Input\n                      id=\"confirmPassword\"\n                      type=\"password\"\n                      value={confirmPassword}\n                      onChange={(e) => setConfirmPassword(e.target.value)}\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                      placeholder=\"Nh·∫≠p l·∫°i m·∫≠t kh·∫©u\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"text-sm text-gray-400 space-y-1\">\n                    <p>Y√™u c·∫ßu m·∫≠t kh·∫©u:</p>\n                    <ul className=\"list-disc list-inside space-y-1 ml-2\">\n                      <li className={adminPassword.length >= 8 ? \"text-green-400\" : \"\"}>\n                        T·ªëi thi·ªÉu 8 k√Ω t·ª±\n                      </li>\n                      <li className={/[A-Z]/.test(adminPassword) ? \"text-green-400\" : \"\"}>\n                        √çt nh·∫•t 1 ch·ªØ HOA\n                      </li>\n                      <li className={/[a-z]/.test(adminPassword) ? \"text-green-400\" : \"\"}>\n                        √çt nh·∫•t 1 ch·ªØ th∆∞·ªùng\n                      </li>\n                      <li className={/[0-9]/.test(adminPassword) ? \"text-green-400\" : \"\"}>\n                        √çt nh·∫•t 1 s·ªë\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n\n              {error && (\n                <Alert variant=\"destructive\" className=\"bg-red-900/20 border-red-800\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"flex gap-3\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setStep(\"check\")}\n                  disabled={loading}\n                  className=\"flex-1\"\n                >\n                  Quay l·∫°i\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={loading}\n                  className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                >\n                  {loading ? \"ƒêang c√†i ƒë·∫∑t...\" : \"B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t\"}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (step === \"installing\") {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 p-4\">\n        <Card className=\"w-full max-w-2xl bg-gray-800/50 border-gray-700 backdrop-blur\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <Loader2 className=\"h-16 w-16 text-blue-500 animate-spin\" />\n            </div>\n            <CardTitle className=\"text-3xl text-white\">ƒêang C√†i ƒê·∫∑t...</CardTitle>\n            <CardDescription className=\"text-gray-300\">\n              H·ªá th·ªëng ƒëang ƒë∆∞·ª£c c·∫•u h√¨nh v√† kh·ªüi t·∫°o d·ªØ li·ªáu\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between text-sm text-gray-300\">\n                <span>Ti·∫øn ƒë·ªô c√†i ƒë·∫∑t</span>\n                <span>{installProgress}%</span>\n              </div>\n              <Progress value={installProgress} className=\"h-3\" />\n            </div>\n\n            <div className=\"space-y-2 text-sm text-gray-400\">\n              <div className={installProgress >= 20 ? \"text-green-400\" : \"\"}>\n                ‚úì T·∫°o t√†i kho·∫£n qu·∫£n tr·ªã\n              </div>\n              <div className={installProgress >= 40 ? \"text-green-400\" : \"\"}>\n                ‚úì C·∫•u h√¨nh th√¥ng tin website\n              </div>\n              <div className={installProgress >= 60 ? \"text-green-400\" : \"\"}>\n                ‚úì Kh·ªüi t·∫°o d·ªØ li·ªáu demo\n              </div>\n              <div className={installProgress >= 80 ? \"text-green-400\" : \"\"}>\n                ‚úì Ho√†n t·∫•t c√†i ƒë·∫∑t\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 p-4\">\n      <Card className=\"w-full max-w-2xl bg-gray-800/50 border-gray-700 backdrop-blur\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <CheckCircle className=\"h-16 w-16 text-green-500\" />\n          </div>\n          <CardTitle className=\"text-3xl text-white\">C√†i ƒê·∫∑t Ho√†n T·∫•t!</CardTitle>\n          <CardDescription className=\"text-gray-300\">\n            H·ªá th·ªëng CTF Platform ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"p-4 bg-green-900/20 border border-green-800 rounded-lg space-y-2\">\n            <p className=\"text-green-400 font-semibold\">‚úì C√†i ƒë·∫∑t th√†nh c√¥ng!</p>\n            <p className=\"text-gray-300 text-sm\">\n              H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh v·ªõi d·ªØ li·ªáu demo bao g·ªìm:\n            </p>\n            <ul className=\"text-sm text-gray-400 space-y-1 ml-4\">\n              <li>‚Ä¢ 12 th·ª≠ th√°ch CTF ƒëa d·∫°ng (Web, Crypto, Forensics, Binary, Reverse)</li>\n              <li>‚Ä¢ 3 th√¥ng b√°o h·ªá th·ªëng</li>\n              <li>‚Ä¢ 3 t√†i kho·∫£n ng∆∞·ªùi d√πng m·∫´u</li>\n              <li>‚Ä¢ 1 t√†i kho·∫£n qu·∫£n tr·ªã</li>\n            </ul>\n          </div>\n\n          <Alert className=\"bg-blue-900/20 border-blue-800\">\n            <Shield className=\"h-4 w-4 text-blue-400\" />\n            <AlertDescription className=\"text-gray-300 text-sm\">\n              <strong className=\"text-blue-400\">L∆∞u √Ω b·∫£o m·∫≠t:</strong> Vui l√≤ng ƒë·ªïi m·∫≠t kh·∫©u admin sau l·∫ßn ƒëƒÉng nh·∫≠p ƒë·∫ßu ti√™n!\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"flex gap-3\">\n            <Button\n              onClick={() => setLocation(\"/admin/login\")}\n              className=\"flex-1 bg-green-600 hover:bg-green-700\"\n            >\n              ƒêƒÉng nh·∫≠p Admin\n            </Button>\n            <Button\n              onClick={() => setLocation(\"/\")}\n              variant=\"outline\"\n              className=\"flex-1\"\n            >\n              V·ªÅ trang ch·ªß\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":18933},"server/middleware/csrf.ts":{"content":"import { RequestHandler } from \"express\";\nimport crypto from \"crypto\";\nimport cookieParser from \"cookie-parser\";\n\nconst CSRF_COOKIE_NAME = \"csrf_token\";\nconst CSRF_HEADER_NAME = \"x-csrf-token\";\nconst CSRF_TOKEN_LENGTH = 32;\n\nfunction generateCsrfToken(): string {\n  return crypto.randomBytes(CSRF_TOKEN_LENGTH).toString(\"hex\");\n}\n\nexport const setCsrfToken: RequestHandler = (req, res, next) => {\n  if (!req.cookies?.[CSRF_COOKIE_NAME]) {\n    const token = generateCsrfToken();\n    res.cookie(CSRF_COOKIE_NAME, token, {\n      httpOnly: false,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"strict\",\n      maxAge: 24 * 60 * 60 * 1000,\n    });\n  }\n  next();\n};\n\nexport const verifyCsrfToken: RequestHandler = (req, res, next) => {\n  const method = req.method.toUpperCase();\n  \n  if ([\"GET\", \"HEAD\", \"OPTIONS\"].includes(method)) {\n    return next();\n  }\n\n  const cookieToken = req.cookies?.[CSRF_COOKIE_NAME];\n  const headerToken = req.headers[CSRF_HEADER_NAME];\n\n  if (!cookieToken || !headerToken) {\n    return res.status(403).json({ \n      message: \"CSRF token missing. Please refresh the page and try again.\" \n    });\n  }\n\n  if (cookieToken !== headerToken) {\n    return res.status(403).json({ \n      message: \"CSRF token validation failed. Please refresh the page and try again.\" \n    });\n  }\n\n  next();\n};\n\nexport { cookieParser };\n","size_bytes":1358},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"server/routes/challenge.routes.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { insertChallengeSchema } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\nimport { requireAdmin, requireUser } from \"../auth\";\nimport rateLimit from \"express-rate-limit\";\n\nconst router = Router();\n\n// Rate limiting for flag submissions\nconst submissionLimiter = rateLimit({\n  windowMs: 60 * 1000, // 1 minute\n  max: 10,\n  message: \"Too many submission attempts, please slow down\",\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Get all challenges (without flags)\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const challenges = await storage.getAllChallenges();\n    // Remove flags from response for security\n    const safeChallenges = challenges.map(({ flag, ...rest }) => rest);\n    res.json(safeChallenges);\n  } catch (error) {\n    console.error(\"Error fetching challenges:\", error);\n    res.status(500).json({ message: \"Failed to fetch challenges\" });\n  }\n});\n\n// Get challenge by ID (without flag)\nrouter.get(\"/:id\", async (req, res) => {\n  try {\n    const challenge = await storage.getChallengeById(req.params.id);\n    if (!challenge) {\n      return res.status(404).json({ message: \"Challenge not found\" });\n    }\n    // Remove flag from response\n    const { flag, ...safeChallenge } = challenge;\n    res.json(safeChallenge);\n  } catch (error) {\n    console.error(\"Error fetching challenge:\", error);\n    res.status(500).json({ message: \"Failed to fetch challenge\" });\n  }\n});\n\n// Submit flag (requires authentication)\nrouter.post(\"/:id/submit\", requireUser, submissionLimiter, async (req, res) => {\n  try {\n    const challengeId = req.params.id;\n    const { flag } = req.body;\n    const userId = req.session.userId!;\n\n    // Validate input\n    if (!flag) {\n      return res.status(400).json({ message: \"Flag is required\" });\n    }\n\n    const challenge = await storage.getChallengeById(challengeId);\n    if (!challenge) {\n      return res.status(404).json({ message: \"Challenge not found\" });\n    }\n\n    // Get current user\n    const player = await storage.getPlayerById(userId);\n    if (!player) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    // Check if already solved\n    const submissions = await storage.getPlayerSubmissions(player.id);\n    const alreadySolved = submissions.some(\n      (sub) => sub.challengeId === challengeId && sub.isCorrect === 1\n    );\n\n    if (alreadySolved) {\n      return res.json({\n        correct: true,\n        message: \"You've already solved this challenge\",\n      });\n    }\n\n    // Check if flag is correct\n    const submittedFlag = flag.trim();\n    const expectedFlag = challenge.flag.trim();\n    const isCorrect = submittedFlag === expectedFlag;\n\n    // Create submission\n    await storage.createSubmission({\n      playerId: player.id,\n      challengeId: challengeId,\n      submittedFlag: flag,\n      isCorrect: isCorrect ? 1 : 0,\n    });\n\n    // Update player score if correct\n    if (isCorrect) {\n      const newScore = player.score + challenge.points;\n      await storage.updatePlayerScore(player.id, newScore);\n    }\n\n    res.json({\n      correct: isCorrect,\n      message: isCorrect\n        ? `Correct! You earned ${challenge.points} points`\n        : \"Incorrect flag. Try again!\",\n    });\n  } catch (error) {\n    console.error(\"Error submitting flag:\", error);\n    res.status(500).json({ message: \"Failed to submit flag\" });\n  }\n});\n\n// Create challenge (admin only)\nrouter.post(\"/\", requireAdmin, async (req, res) => {\n  try {\n    const result = insertChallengeSchema.safeParse(req.body);\n    if (!result.success) {\n      const validationError = fromZodError(result.error);\n      return res.status(400).json({ message: validationError.message });\n    }\n\n    const challenge = await storage.createChallenge(result.data);\n    res.status(201).json(challenge);\n  } catch (error) {\n    console.error(\"Error creating challenge:\", error);\n    res.status(500).json({ message: \"Failed to create challenge\" });\n  }\n});\n\n// Update challenge (admin only)\nrouter.put(\"/:id\", requireAdmin, async (req, res) => {\n  try {\n    const result = insertChallengeSchema.safeParse(req.body);\n    if (!result.success) {\n      const validationError = fromZodError(result.error);\n      return res.status(400).json({ message: validationError.message });\n    }\n\n    const challenge = await storage.updateChallenge(req.params.id, result.data);\n    if (!challenge) {\n      return res.status(404).json({ message: \"Challenge not found\" });\n    }\n    res.json(challenge);\n  } catch (error) {\n    console.error(\"Error updating challenge:\", error);\n    res.status(500).json({ message: \"Failed to update challenge\" });\n  }\n});\n\n// Delete challenge (admin only)\nrouter.delete(\"/:id\", requireAdmin, async (req, res) => {\n  try {\n    const success = await storage.deleteChallenge(req.params.id);\n    if (!success) {\n      return res.status(404).json({ message: \"Challenge not found\" });\n    }\n    res.json({ message: \"Challenge deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting challenge:\", error);\n    res.status(500).json({ message: \"Failed to delete challenge\" });\n  }\n});\n\nexport default router;\n","size_bytes":5193},"README.md":{"content":"# üö© CTF Platform\n\nA modern, full-stack Capture The Flag (CTF) platform built with React, Express, and PostgreSQL. This platform provides a comprehensive environment for hosting cybersecurity challenges with real-time scoring, user management, and an intuitive admin panel.\n\n## ‚ú® Features\n\n### üéØ User Features\n- **User Authentication** - Secure registration and login system with session management\n- **Challenge Browser** - Browse challenges by category (Web, Crypto, Forensics, Binary, Reverse)\n- **Difficulty Levels** - Challenges categorized as Easy, Medium, or Hard\n- **Flag Submission** - Submit flags and get instant feedback with rate limiting\n- **Real-time Scoring** - Track your points and progress\n- **Leaderboard** - Compete with other players and view rankings\n- **Announcement System** - Stay updated with platform announcements via beautiful animated popups\n- **Responsive Design** - Works perfectly on all devices\n\n### üõ°Ô∏è Admin Features\n- **Modern Admin Dashboard** - Overview of platform statistics and activity\n- **Challenge Management** - Create, edit, and delete challenges with a user-friendly interface\n- **Announcement Management** - Create and manage platform-wide announcements with priority levels\n- **Player Analytics** - View player statistics and submission history\n- **Responsive Admin Panel** - Fully responsive with sidebar navigation\n- **Stat Cards** - Real-time statistics with beautiful gradient designs\n\n### üé® Design & UX\n- **Modern UI** - Built with Tailwind CSS and Radix UI components\n- **Smooth Animations** - Framer Motion powered animations throughout the app\n- **Dark Mode Support** - Seamless dark mode integration\n- **Gradient Accents** - Beautiful gradient color schemes for visual appeal\n- **Loading States** - Elegant loading animations and skeletons\n- **Error Handling** - User-friendly error messages and error boundaries\n\n### üîí Security Features\n- **CSRF Protection** - Double-submit cookie pattern for CSRF prevention\n- **Session Management** - Secure session handling with PostgreSQL storage (serverless-compatible)\n- **Password Hashing** - Bcrypt with 10 rounds for secure password storage\n- **Security Headers** - Helmet.js for comprehensive security headers (CSP, HSTS, XSS protection)\n- **Admin-only Routes** - Protected routes for administrative functions\n- **Input Validation** - Zod schema validation for all API endpoints\n- **Rate Limiting** - Configurable rate limits on authentication and submissions\n- **SQL Injection Prevention** - Parameterized queries via Drizzle ORM and Neon\n\n## üõ†Ô∏è Tech Stack\n\n### Frontend\n- **React 18** - Modern UI library with hooks\n- **TypeScript** - Type-safe development\n- **Vite** - Lightning-fast build tool\n- **TanStack Query** - Powerful data synchronization\n- **Wouter** - Lightweight routing (2kb)\n- **Tailwind CSS** - Utility-first CSS framework\n- **Radix UI** - Accessible component primitives\n- **Framer Motion** - Production-ready animations\n- **React Hook Form** - Performant form validation\n\n### Backend\n- **Express.js** - Fast, unopinionated web framework\n- **TypeScript** - Type-safe server development\n- **PostgreSQL** - Reliable relational database (via Neon)\n- **Drizzle ORM** - Type-safe SQL toolkit\n- **Express Session** - Session management with PostgreSQL store\n- **Helmet** - Security middleware\n- **Bcrypt** - Password hashing\n\n### Development & Deployment\n- **tsx** - TypeScript execution for Node.js\n- **Drizzle Kit** - Database migrations\n- **ESBuild** - Fast JavaScript bundler\n- **Vercel** - Serverless deployment platform\n- **Neon** - Serverless PostgreSQL\n\n## üìã Prerequisites\n\nBefore you begin, ensure you have the following installed:\n- **Node.js** (v18 or higher)\n- **npm** (v9 or higher)\n- **PostgreSQL** (v14 or higher) or a Neon account for serverless PostgreSQL\n\n## üöÄ Quick Start\n\n### Local Development\n\n#### 1. Clone the Repository\n```bash\ngit clone <repository-url>\ncd ctf-platform\n```\n\n#### 2. Install Dependencies\n```bash\nnpm install\n```\n\n#### 3. Configure Environment Variables\n\nCreate a `.env` file in the root directory:\n\n```env\nDATABASE_URL=postgresql://username:password@localhost:5432/ctf_db\nSESSION_SECRET=your-super-secret-key-min-32-chars\nNODE_ENV=development\n```\n\n**Generate a secure SESSION_SECRET:**\n```bash\nopenssl rand -base64 32\n```\n\n#### 4. Push Database Schema\n```bash\nnpm run db:push\n```\n\nThis will create all necessary tables in your database.\n\n#### 5. Create Admin User\n```bash\nnpx tsx server/scripts/quick-init-admin.ts\n```\n\n**Default Admin Credentials:**\n- Username: `admin`\n- Password: `Admin123!@#`\n\n> ‚ö†Ô∏è **Important:** Change the admin password immediately after first login!\n\n#### 6. Start Development Server\n```bash\nnpm run dev\n```\n\nThe application will start on `http://localhost:5000`\n\n## ‚òÅÔ∏è Deploy to Vercel\n\nThis application is optimized for serverless deployment on Vercel. See **[VERCEL_DEPLOY.md](./VERCEL_DEPLOY.md)** for detailed Vietnamese deployment instructions.\n\n### Quick Deployment Steps\n\n1. **Push to GitHub**\n   ```bash\n   git init\n   git add .\n   git commit -m \"Initial commit\"\n   git remote add origin https://github.com/yourusername/ctf-platform.git\n   git push -u origin main\n   ```\n\n2. **Import to Vercel**\n   - Go to [vercel.com](https://vercel.com)\n   - Click \"New Project\"\n   - Import your GitHub repository\n\n3. **Configure Environment Variables**\n   Add these in Vercel project settings:\n   ```\n   DATABASE_URL=your_neon_or_vercel_postgres_url\n   SESSION_SECRET=your_strong_random_secret\n   NODE_ENV=production\n   ```\n\n4. **Deploy**\n   - Click \"Deploy\"\n   - Wait 2-5 minutes for build completion\n   - Your app will be live at `https://your-app.vercel.app`\n\n5. **Initialize Database**\n   ```bash\n   vercel env pull .env.local\n   npm run db:push\n   npx tsx server/scripts/quick-init-admin.ts\n   ```\n\n## üìÅ Project Structure\n\n```\nctf-platform/\n‚îú‚îÄ‚îÄ api/                       # Serverless functions for Vercel\n‚îÇ   ‚îî‚îÄ‚îÄ index.mjs             # Express app as serverless function (ES modules)\n‚îú‚îÄ‚îÄ client/                    # Frontend application\n‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/       # Reusable UI components\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ui/          # Radix UI components\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ChallengeCard.tsx\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AnnouncementPopup.tsx\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Layout.tsx\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ PageLoader.tsx\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/           # Page components\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Admin.tsx\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AdminLogin.tsx\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ChallengeList.tsx\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ChallengeDetail.tsx\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Leaderboard.tsx\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Login.tsx\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Register.tsx\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/           # Custom React hooks\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useAuth.ts\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useAdminAuth.ts\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ use-toast.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/        # API service layer\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ api.service.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib/             # Utility functions\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.css        # Global styles and animations\n‚îÇ   ‚îú‚îÄ‚îÄ public/              # Static assets\n‚îÇ   ‚îî‚îÄ‚îÄ index.html\n‚îú‚îÄ‚îÄ server/                   # Backend application (for local dev)\n‚îÇ   ‚îú‚îÄ‚îÄ routes/              # API route handlers\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.routes.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ admin.routes.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ challenge.routes.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ announcement.routes.ts\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ public.routes.ts\n‚îÇ   ‚îú‚îÄ‚îÄ middleware/          # Express middleware\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ csrf.ts\n‚îÇ   ‚îú‚îÄ‚îÄ services/            # Business logic\n‚îÇ   ‚îú‚îÄ‚îÄ scripts/             # Utility scripts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ init-admin.ts\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ quick-init-admin.ts\n‚îÇ   ‚îú‚îÄ‚îÄ auth.ts             # Authentication configuration\n‚îÇ   ‚îú‚îÄ‚îÄ storage.ts          # Database operations\n‚îÇ   ‚îú‚îÄ‚îÄ db.ts               # Database connection\n‚îÇ   ‚îî‚îÄ‚îÄ index.ts            # Server entry point\n‚îú‚îÄ‚îÄ shared/                  # Shared code between client/server\n‚îÇ   ‚îú‚îÄ‚îÄ schema.ts           # Database schema (Drizzle)\n‚îÇ   ‚îî‚îÄ‚îÄ utils/\n‚îú‚îÄ‚îÄ dist/                    # Build output\n‚îÇ   ‚îî‚îÄ‚îÄ public/             # Frontend production build\n‚îú‚îÄ‚îÄ vercel.json             # Vercel deployment configuration\n‚îú‚îÄ‚îÄ .vercelignore           # Files to exclude from deployment\n‚îú‚îÄ‚îÄ VERCEL_DEPLOY.md        # Detailed deployment guide (Vietnamese)\n‚îú‚îÄ‚îÄ package.json\n‚îî‚îÄ‚îÄ README.md\n```\n\n## üåê Environment Variables\n\n### Required Variables\n\n| Variable | Description | Example |\n|----------|-------------|---------|\n| `DATABASE_URL` | PostgreSQL connection string | `postgresql://user:pass@host:5432/db` |\n| `SESSION_SECRET` | Secret key for session encryption (min 32 chars) | Generate with `openssl rand -base64 32` |\n| `NODE_ENV` | Environment mode | `development` or `production` |\n\n### Optional Variables\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `FRONTEND_URL` | Frontend URL for CORS | `*` |\n\n> ‚ö†Ô∏è **Security Warning:** `SESSION_SECRET` is **mandatory**. The application will throw an error if not set. Never use a default or weak value in production.\n\n## üìñ Usage Guide\n\n### For Players\n\n1. **Register an Account**\n   - Navigate to `/register`\n   - Create your account with username, email, and password\n   - Passwords must be at least 8 characters\n\n2. **Browse Challenges**\n   - View all available challenges on the homepage\n   - Filter by category or difficulty\n   - See your solved challenges with checkmarks\n   - Track your progress with the stats dashboard\n\n3. **Solve Challenges**\n   - Click on a challenge to view its description (supports Markdown)\n   - Read the challenge details and hints\n   - Submit flags in the correct format\n   - Earn points for correct submissions\n   - Cannot submit if already solved (displayed with info message)\n\n4. **Check the Leaderboard**\n   - View your ranking among other players\n   - See top performers and their scores\n   - Track solved challenge count\n\n### For Administrators\n\n1. **Login to Admin Panel**\n   - Navigate to `/admin/login`\n   - Use your admin credentials\n   - Admin sessions are separate from user sessions\n\n2. **Dashboard Overview**\n   - View total challenges, users, submissions\n   - See platform statistics with gradient cards\n   - Monitor recent activity\n\n3. **Manage Challenges**\n   - Create new challenges with:\n     - Title and description (Markdown supported)\n     - Category (Web, Crypto, Forensics, Binary, Reverse)\n     - Difficulty (Easy, Medium, Hard)\n     - Points (10-1000)\n     - Flag (correct answer)\n   - Edit existing challenges\n   - Delete challenges (also deletes associated submissions)\n   - View all challenges in a filterable table\n\n4. **Manage Announcements**\n   - Create announcements with:\n     - Title and content\n     - Priority (low, normal, high, urgent)\n     - Active/Inactive status\n   - Edit or delete announcements\n   - Active announcements appear to all users as popups\n\n5. **Monitor Platform**\n   - View statistics on the dashboard\n   - Track player activity and submissions\n   - Monitor challenge completion rates\n\n> üîí **Note:** Admins cannot submit flags. The admin role is for platform management only.\n\n## üóÑÔ∏è Database Schema\n\n### Tables\n\n- **players** - User accounts for participants\n  - `id`, `username`, `email`, `password_hash`, `score`, `created_at`\n\n- **challenges** - CTF challenges\n  - `id`, `title`, `description`, `flag`, `points`, `category`, `difficulty`, `created_at`\n\n- **submissions** - Flag submission records\n  - `id`, `player_id`, `challenge_id`, `submitted_flag`, `is_correct`, `submitted_at`\n\n- **admins** - Admin accounts with elevated privileges\n  - `id`, `username`, `password_hash`, `created_at`\n\n- **announcements** - Platform announcements\n  - `id`, `title`, `content`, `priority`, `is_active`, `created_at`\n\n- **session** - User session data (auto-created by connect-pg-simple)\n  - `sid`, `sess`, `expire`\n\n## üîê Security Considerations\n\n### Authentication & Sessions\n- Passwords hashed with bcrypt (10 rounds)\n- Sessions stored in PostgreSQL for serverless compatibility\n- Session cookies: `secure`, `httpOnly`, `sameSite: strict`\n- Rolling sessions (24-hour expiration, renewed on activity)\n- Separate admin and user session management\n\n### API Security\n- CSRF protection with double-submit cookie pattern\n- Rate limiting on:\n  - Auth endpoints (5 requests per 15 min)\n  - Admin login (3 requests per 15 min)\n  - Flag submission (10 requests per minute)\n- Input validation with Zod schemas\n- SQL injection prevention via parameterized queries\n\n### Headers & Policies\n- Content Security Policy (CSP)\n- HTTP Strict Transport Security (HSTS)\n- X-Frame-Options (clickjacking protection)\n- X-Content-Type-Options (MIME sniffing prevention)\n- XSS Filter enabled\n- Referrer Policy: strict-origin-when-cross-origin\n\n## üé® Customization\n\n### Branding\n```css\n/* Update colors in client/src/index.css */\n:root {\n  --primary: 222.2 47.4% 11.2%;\n  --primary-foreground: 210 40% 98%;\n  /* ... other CSS variables */\n}\n```\n\n### Challenges\nAdd sample challenges in `server/storage.ts`:\n```typescript\nawait storage.createChallenge({\n  title: \"Your Challenge\",\n  description: \"Challenge description with **markdown**\",\n  flag: \"CTF{your_flag_here}\",\n  points: 100,\n  category: \"Web\",\n  difficulty: \"Easy\"\n});\n```\n\n### UI Components\n- All UI components are in `client/src/components/ui/`\n- Built with Radix UI for accessibility\n- Customizable via className prop with Tailwind\n\n## üß™ API Endpoints\n\n### Public Endpoints\n- `GET /api/challenges` - List all challenges (without flags)\n- `GET /api/challenges/:id` - Get challenge details\n- `GET /api/leaderboard` - Get leaderboard\n- `GET /api/announcements` - Get active announcements\n\n### Authenticated Endpoints\n- `POST /api/auth/register` - Register new user\n- `POST /api/auth/login` - User login\n- `GET /api/auth/user` - Get current user\n- `POST /api/logout` - Logout (destroys session)\n- `POST /api/challenges/:id/submit` - Submit flag\n- `GET /api/solved` - Get solved challenges for current user\n\n### Admin Endpoints\n- `POST /api/admin/login` - Admin login\n- `POST /api/admin/logout` - Admin logout\n- `GET /api/admin/session` - Check admin session\n- `GET /api/admin/stats` - Get platform statistics\n- `GET /api/admin/challenges` - Get all challenges (with flags)\n- `POST /api/admin/challenges` - Create challenge\n- `PUT /api/admin/challenges/:id` - Update challenge\n- `DELETE /api/admin/challenges/:id` - Delete challenge\n- `GET /api/admin/announcements` - Get all announcements\n- `POST /api/admin/announcements` - Create announcement\n- `PUT /api/admin/announcements/:id` - Update announcement\n- `DELETE /api/admin/announcements/:id` - Delete announcement\n\n## üêõ Troubleshooting\n\n### Database Connection Issues\n```bash\n# Check database URL is set correctly\necho $DATABASE_URL\n\n# Test database connection\nnpx drizzle-kit studio\n```\n\n### Port Already in Use\nThe application runs on port 5000 by default. Change in `server/index.ts`:\n```typescript\nconst PORT = 5000; // Change to desired port\n```\n\n### Admin User Not Created\nRun the admin creation script manually:\n```bash\nnpx tsx server/scripts/quick-init-admin.ts\n```\n\n### Session Issues on Vercel\nSessions are stored in PostgreSQL using `connect-pg-simple`. Ensure:\n- `DATABASE_URL` is set correctly\n- Database is accessible from Vercel\n- `SESSION_SECRET` is set\n\n### Build Failures\n```bash\n# Clear cache and reinstall\nrm -rf node_modules dist\nnpm install\nnpm run build\n```\n\n## üìù Scripts\n\n| Command | Description |\n|---------|-------------|\n| `npm run dev` | Start development server with hot reload |\n| `npm run build` | Build frontend and backend for production |\n| `npm start` | Run production server (local) |\n| `npm run check` | TypeScript type checking |\n| `npm run db:push` | Push database schema changes to DB |\n\n## üö¢ Deployment Options\n\n### Option 1: Vercel (Recommended)\n- Serverless deployment\n- Auto-scaling\n- Global CDN\n- Free tier available\n- See [VERCEL_DEPLOY.md](./VERCEL_DEPLOY.md) for detailed guide\n\n### Option 2: Traditional Hosting\n- VPS or dedicated server\n- Requires PostgreSQL installation\n- Use `npm run build && npm start`\n- Configure reverse proxy (nginx/apache)\n\n### Option 3: Docker\n- Create Dockerfile (not included)\n- Use docker-compose with PostgreSQL\n- Good for self-hosting\n\n## ü§ù Contributing\n\nContributions are welcome! Please follow these steps:\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n### Development Guidelines\n- Follow TypeScript best practices\n- Use provided ESLint and Prettier configs (if available)\n- Write meaningful commit messages\n- Test your changes thoroughly\n- Update documentation as needed\n\n## üìÑ License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## üôè Acknowledgments\n\n- **UI Components** - [Radix UI](https://www.radix-ui.com/)\n- **Icons** - [Lucide React](https://lucide.dev/)\n- **Animations** - [Framer Motion](https://www.framer.com/motion/)\n- **Database** - [Neon](https://neon.tech/) (Serverless PostgreSQL)\n- **Deployment** - [Vercel](https://vercel.com/)\n- Inspired by popular CTF platforms like CTFd and PicoCTF\n\n## üìû Support\n\nFor issues and questions:\n- Open an issue on GitHub\n- Check existing documentation\n- Review troubleshooting section\n\n---\n\n**Built with ‚ù§Ô∏è for the cybersecurity community**\n\n> üîí Remember: Always change default admin credentials and keep your SESSION_SECRET secure!\n","size_bytes":17855},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ChallengeCard.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle2, Circle, Lock, Terminal } from \"lucide-react\";\nimport type { Challenge } from \"@shared/schema\";\n\ninterface ChallengeCardProps {\n  challenge: Challenge;\n  isSolved?: boolean;\n  index?: number;\n}\n\nconst difficultyConfig = {\n  easy: { color: \"bg-chart-1 text-primary-foreground\", label: \"Easy\" },\n  medium: { color: \"bg-chart-3 text-primary-foreground\", label: \"Medium\" },\n  hard: { color: \"bg-chart-5 text-primary-foreground\", label: \"Hard\" },\n};\n\nconst categoryIcons: Record<string, React.ReactNode> = {\n  web: <Terminal className=\"h-3 w-3\" />,\n  crypto: <Lock className=\"h-3 w-3\" />,\n  forensics: <Terminal className=\"h-3 w-3\" />,\n  reverse: <Terminal className=\"h-3 w-3\" />,\n  binary: <Terminal className=\"h-3 w-3\" />,\n};\n\nexport function ChallengeCard({ challenge, isSolved = false, index = 0 }: ChallengeCardProps) {\n  const difficulty = challenge.difficulty.toLowerCase() as keyof typeof difficultyConfig;\n  const diffConfig = difficultyConfig[difficulty] || difficultyConfig.medium;\n\n  return (\n    <Card \n      className=\"hover-elevate transition-all duration-300 h-full flex flex-col group hover:shadow-lg animate-scale-in\" \n      data-testid={`card-challenge-${challenge.id}`}\n      style={{ animationDelay: `${index * 0.1}s` }}\n    >\n      <CardHeader className=\"flex-row items-start justify-between gap-2 space-y-0 pb-3\">\n        <div className=\"flex flex-col gap-2 flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2 flex-wrap\">\n            <Badge variant=\"outline\" className=\"gap-1 text-xs transition-all duration-300 group-hover:opacity-90\">\n              {categoryIcons[challenge.category.toLowerCase()]}\n              {challenge.category}\n            </Badge>\n            <Badge className={`${diffConfig.color} text-xs transition-all duration-300 group-hover:opacity-90`}>\n              {diffConfig.label}\n            </Badge>\n          </div>\n          <h3 className=\"font-serif font-semibold text-lg leading-tight transition-colors duration-300 group-hover:text-primary\" data-testid={`text-title-${challenge.id}`}>\n            {challenge.title}\n          </h3>\n        </div>\n        {isSolved ? (\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-primary/20 rounded-full blur-md animate-pulse\" />\n            <CheckCircle2 className=\"h-5 w-5 text-primary flex-shrink-0 relative animate-bounce-slow\" data-testid={`icon-solved-${challenge.id}`} />\n          </div>\n        ) : (\n          <Circle className=\"h-5 w-5 text-muted-foreground flex-shrink-0 transition-all duration-300 group-hover:text-primary group-hover:opacity-80\" data-testid={`icon-unsolved-${challenge.id}`} />\n        )}\n      </CardHeader>\n\n      <CardContent className=\"flex-1\">\n        <p className=\"text-sm text-muted-foreground line-clamp-3 transition-colors duration-300 group-hover:text-foreground\" data-testid={`text-description-${challenge.id}`}>\n          {challenge.description}\n        </p>\n      </CardContent>\n\n      <CardFooter className=\"flex items-center justify-between gap-4 pt-4\">\n        <div className=\"flex items-center gap-2 transition-opacity duration-300 group-hover:opacity-90\">\n          <span className=\"text-2xl font-bold text-primary font-mono\" data-testid={`text-points-${challenge.id}`}>\n            {challenge.points}\n          </span>\n          <span className=\"text-sm text-muted-foreground\">pts</span>\n        </div>\n        <Link href={`/challenge/${challenge.id}`} data-testid={`link-view-${challenge.id}`}>\n          <Button size=\"sm\" className=\"transition-all duration-300 hover:opacity-90\">\n            View Challenge\n          </Button>\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n}\n","size_bytes":3900},"client/src/services/api.service.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\nimport type { Challenge, InsertChallenge, RegisterUser, LoginUser } from \"@shared/schema\";\n\n/**\n * API Service for type-safe API calls\n */\nexport class ApiService {\n  // Auth endpoints\n  static async register(data: RegisterUser) {\n    return apiRequest(\"POST\", \"/api/auth/register\", data);\n  }\n\n  static async login(data: LoginUser) {\n    return apiRequest(\"POST\", \"/api/auth/login\", data);\n  }\n\n  static async logout() {\n    return apiRequest(\"POST\", \"/api/auth/logout\", {});\n  }\n\n  static async getCurrentUser() {\n    return apiRequest(\"GET\", \"/api/auth/user\");\n  }\n\n  // Challenge endpoints\n  static async getAllChallenges() {\n    return apiRequest(\"GET\", \"/api/challenges\");\n  }\n\n  static async getChallengeById(id: string) {\n    return apiRequest(\"GET\", `/api/challenges/${id}`);\n  }\n\n  static async submitFlag(challengeId: string, flag: string) {\n    return apiRequest(\"POST\", `/api/challenges/${challengeId}/submit`, { flag });\n  }\n\n  static async getSolvedChallenges() {\n    return apiRequest(\"GET\", \"/api/solved\");\n  }\n\n  // Admin endpoints\n  static async adminLogin(username: string, password: string) {\n    return apiRequest(\"POST\", \"/api/admin/login\", { username, password });\n  }\n\n  static async adminLogout() {\n    return apiRequest(\"POST\", \"/api/admin/logout\", {});\n  }\n\n  static async getAdminSession() {\n    return apiRequest(\"GET\", \"/api/admin/session\");\n  }\n\n  static async getAdminChallenges() {\n    return apiRequest(\"GET\", \"/api/admin/challenges\");\n  }\n\n  static async createChallenge(data: InsertChallenge) {\n    return apiRequest(\"POST\", \"/api/challenges\", data);\n  }\n\n  static async updateChallenge(id: string, data: InsertChallenge) {\n    return apiRequest(\"PUT\", `/api/challenges/${id}`, data);\n  }\n\n  static async deleteChallenge(id: string) {\n    return apiRequest(\"DELETE\", `/api/challenges/${id}`);\n  }\n\n  // Leaderboard\n  static async getLeaderboard() {\n    return apiRequest(\"GET\", \"/api/leaderboard\");\n  }\n}\n","size_bytes":1990},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/hooks/useAdminAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAdminAuth() {\n  const { data: session, isLoading } = useQuery<{\n    authenticated: boolean;\n    admin?: { id: string; username: string };\n  }>({\n    queryKey: [\"/api/admin/session\"],\n    retry: false,\n  });\n\n  return {\n    isAdmin: session?.authenticated || false,\n    admin: session?.admin,\n    isLoading,\n  };\n}\n","size_bytes":384},"server/routes/admin.routes.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { requireAdmin } from \"../auth\";\nimport { loginAdminSchema } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\nimport rateLimit from \"express-rate-limit\";\n\nconst router = Router();\n\nconst adminLoginLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 3,\n  message: \"Too many admin login attempts, please try again later\",\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nrouter.post(\"/login\", adminLoginLimiter, async (req, res) => {\n  try {\n    const result = loginAdminSchema.safeParse(req.body);\n    if (!result.success) {\n      const validationError = fromZodError(result.error);\n      return res.status(400).json({ message: validationError.message });\n    }\n\n    const { username, password } = result.data;\n\n    const isValid = await storage.verifyAdminPassword(username, password);\n    \n    if (!isValid) {\n      return res.status(401).json({ message: \"Invalid username or password\" });\n    }\n\n    const admin = await storage.getAdminByUsername(username);\n    if (!admin) {\n      return res.status(401).json({ message: \"Invalid username or password\" });\n    }\n\n    await new Promise<void>((resolve, reject) => {\n      req.session.regenerate((err) => {\n        if (err) return reject(err);\n        \n        req.session.adminId = admin.id;\n        req.session.adminUsername = admin.username;\n        req.session.userId = undefined;\n        req.session.username = undefined;\n        \n        req.session.save((saveErr) => {\n          if (saveErr) return reject(saveErr);\n          resolve();\n        });\n      });\n    });\n\n    res.json({ \n      message: \"Login successful\",\n      admin: {\n        id: admin.id,\n        username: admin.username,\n      }\n    });\n  } catch (error) {\n    console.error(\"Admin login error:\", error);\n    res.status(500).json({ message: \"Failed to login\" });\n  }\n});\n\nrouter.post(\"/logout\", async (req, res) => {\n  try {\n    await new Promise<void>((resolve, reject) => {\n      req.session.destroy((err) => {\n        if (err) return reject(err);\n        res.clearCookie('connect.sid');\n        resolve();\n      });\n    });\n    \n    res.json({ message: \"Logout successful\" });\n  } catch (error) {\n    console.error(\"Logout error:\", error);\n    res.status(500).json({ message: \"Failed to logout\" });\n  }\n});\n\nrouter.get(\"/session\", async (req, res) => {\n  if (req.session && req.session.adminId) {\n    res.json({\n      authenticated: true,\n      admin: {\n        id: req.session.adminId,\n        username: req.session.adminUsername,\n      }\n    });\n  } else {\n    res.json({ authenticated: false });\n  }\n});\n\nrouter.get(\"/challenges\", requireAdmin, async (req, res) => {\n  try {\n    const challenges = await storage.getAllChallenges();\n    res.json(challenges);\n  } catch (error) {\n    console.error(\"Error fetching challenges:\", error);\n    res.status(500).json({ message: \"Failed to fetch challenges\" });\n  }\n});\n\nrouter.get(\"/challenges/:id\", requireAdmin, async (req, res) => {\n  try {\n    const challenge = await storage.getChallengeById(req.params.id);\n    if (!challenge) {\n      return res.status(404).json({ message: \"Challenge not found\" });\n    }\n    res.json(challenge);\n  } catch (error) {\n    console.error(\"Error fetching challenge:\", error);\n    res.status(500).json({ message: \"Failed to fetch challenge\" });\n  }\n});\n\nrouter.get(\"/stats\", requireAdmin, async (req, res) => {\n  try {\n    const [challenges, players, submissions] = await Promise.all([\n      storage.getAllChallenges(),\n      storage.getAllPlayers(),\n      storage.getAllSubmissions(),\n    ]);\n\n    const totalChallenges = challenges.length;\n    const totalPlayers = players.length;\n    const totalSubmissions = submissions.length;\n    const successfulSolves = submissions.filter(s => s.isCorrect).length;\n    \n    const challengesByCategory = challenges.reduce((acc, challenge) => {\n      acc[challenge.category] = (acc[challenge.category] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const challengesByDifficulty = challenges.reduce((acc, challenge) => {\n      acc[challenge.difficulty] = (acc[challenge.difficulty] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const recentSubmissions = submissions\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, 10);\n\n    res.json({\n      totalChallenges,\n      totalPlayers,\n      totalSubmissions,\n      successfulSolves,\n      challengesByCategory,\n      challengesByDifficulty,\n      recentSubmissions,\n    });\n  } catch (error) {\n    console.error(\"Error fetching admin stats:\", error);\n    res.status(500).json({ message: \"Failed to fetch statistics\" });\n  }\n});\n\nexport default router;\n","size_bytes":4765},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/MarkdownRenderer.tsx":{"content":"import { renderMarkdown } from \"@/lib/markdown\";\nimport { useMemo } from \"react\";\n\ninterface MarkdownRendererProps {\n  content: string;\n  className?: string;\n}\n\nexport function MarkdownRenderer({ content, className = \"\" }: MarkdownRendererProps) {\n  const sanitizedHtml = useMemo(() => renderMarkdown(content), [content]);\n\n  return (\n    <div\n      className={`prose prose-invert max-w-none ${className}`}\n      dangerouslySetInnerHTML={{ __html: sanitizedHtml }}\n    />\n  );\n}\n","size_bytes":479},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"server/scripts/init-admin.ts":{"content":"import { storage } from \"../storage\";\nimport { AuthService } from \"../services/auth.service\";\nimport readline from \"readline\";\n\n/**\n * Script to create initial admin user with secure password\n * Run with: npx tsx server/scripts/init-admin.ts\n */\nasync function initAdmin() {\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n\n  const question = (query: string): Promise<string> =>\n    new Promise(resolve => rl.question(query, resolve));\n\n  try {\n    console.log(\"=== CTF Platform Admin Setup ===\\n\");\n\n    // Check if admin already exists\n    const existingAdmin = await storage.getAdminByUsername(\"admin\");\n    if (existingAdmin) {\n      const overwrite = await question(\"Admin user already exists. Overwrite? (yes/no): \");\n      if (overwrite.toLowerCase() !== \"yes\") {\n        console.log(\"Setup cancelled.\");\n        rl.close();\n        process.exit(0);\n      }\n    }\n\n    const username = await question(\"Enter admin username (default: admin): \") || \"admin\";\n    let password = await question(\"Enter admin password (min 8 chars): \");\n\n    while (password.length < 8) {\n      console.log(\"‚ùå Password must be at least 8 characters long.\");\n      password = await question(\"Enter admin password (min 8 chars): \");\n    }\n\n    // Create or update admin\n    if (existingAdmin) {\n      console.log(\"Updating existing admin user...\");\n      // Note: We would need an update method. For now, we'll skip this scenario\n      console.log(\"‚ö†Ô∏è  Please delete the existing admin manually and run this script again.\");\n    } else {\n      await storage.createAdmin({\n        username,\n        passwordHash: await AuthService.hashPassword(password),\n      });\n      console.log(`‚úÖ Admin user '${username}' created successfully!`);\n    }\n\n    rl.close();\n    process.exit(0);\n  } catch (error) {\n    console.error(\"‚ùå Error creating admin:\", error);\n    rl.close();\n    process.exit(1);\n  }\n}\n\ninitAdmin();\n","size_bytes":1952},"client/src/pages/AdminLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, LogIn, Lock, User } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\n\nexport function AdminLogin() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome back, admin!\",\n      });\n      // Reload page to reset app state completely\n      window.location.href = \"/admin\";\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!username.trim() || !password) return;\n    loginMutation.mutate({ username, password });\n  };\n\n  return (\n    <div className=\"min-h-[80vh] flex items-center justify-center relative overflow-hidden\">\n      {/* Animated background gradient blobs */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-primary/20 rounded-full blur-3xl animate-float\" \n             style={{ animationDelay: \"0s\" }} />\n        <div className=\"absolute -bottom-40 -left-40 w-96 h-96 bg-chart-3/20 rounded-full blur-3xl animate-float\" \n             style={{ animationDelay: \"2s\" }} />\n        <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-72 h-72 bg-chart-5/20 rounded-full blur-3xl animate-float\" \n             style={{ animationDelay: \"4s\" }} />\n      </div>\n\n      <Card className=\"w-full max-w-md relative backdrop-blur-sm bg-background/95 shadow-2xl border-2 animate-scale-in\">\n        <CardHeader className=\"space-y-6 text-center pb-4\">\n          {/* Animated shield icon */}\n          <div className=\"flex justify-center\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 bg-primary/20 rounded-full blur-xl animate-pulse\" />\n              <div className=\"relative rounded-full bg-gradient-to-br from-primary via-chart-3 to-chart-5 p-6 animate-rotate-slow\">\n                <Shield className=\"h-12 w-12 text-white drop-shadow-lg\" />\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"space-y-2 animate-fade-in-up\" style={{ animationDelay: \"0.1s\" }}>\n            <h1 className=\"text-4xl font-serif font-bold bg-gradient-to-r from-primary via-chart-3 to-chart-5 bg-clip-text text-transparent\">\n              Admin Portal\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Secure access to platform management\n            </p>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          <form onSubmit={handleSubmit} className=\"space-y-5\">\n            {/* Username field */}\n            <div className=\"space-y-2 animate-fade-in-up\" style={{ animationDelay: \"0.2s\" }}>\n              <label className=\"text-sm font-semibold flex items-center gap-2\">\n                <User className=\"h-4 w-4 text-primary\" />\n                Username\n              </label>\n              <div className=\"relative group\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Enter your username\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  disabled={loginMutation.isPending}\n                  data-testid=\"input-admin-username\"\n                  className=\"pl-4 pr-4 h-12 transition-all duration-300 group-hover:border-primary/50\"\n                />\n              </div>\n            </div>\n\n            {/* Password field */}\n            <div className=\"space-y-2 animate-fade-in-up\" style={{ animationDelay: \"0.3s\" }}>\n              <label className=\"text-sm font-semibold flex items-center gap-2\">\n                <Lock className=\"h-4 w-4 text-primary\" />\n                Password\n              </label>\n              <div className=\"relative group\">\n                <Input\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  disabled={loginMutation.isPending}\n                  data-testid=\"input-admin-password\"\n                  className=\"pl-4 pr-4 h-12 transition-all duration-300 group-hover:border-primary/50\"\n                />\n              </div>\n            </div>\n\n            {/* Login button */}\n            <div className=\"animate-fade-in-up\" style={{ animationDelay: \"0.4s\" }}>\n              <Button\n                type=\"submit\"\n                className=\"w-full h-12 gap-2 text-base font-semibold bg-gradient-to-r from-primary via-chart-3 to-chart-5 hover:opacity-90 transition-all duration-300 hover:shadow-lg\"\n                disabled={loginMutation.isPending || !username.trim() || !password}\n                data-testid=\"button-admin-login\"\n              >\n                {loginMutation.isPending ? (\n                  <>\n                    <div className=\"h-5 w-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                    Authenticating...\n                  </>\n                ) : (\n                  <>\n                    <LogIn className=\"h-5 w-5\" />\n                    Access Admin Panel\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n          \n          {/* Info note */}\n          <div className=\"animate-fade-in-up\" style={{ animationDelay: \"0.5s\" }}>\n            <div className=\"p-4 rounded-lg bg-gradient-to-r from-primary/5 via-chart-3/5 to-chart-5/5 border border-primary/20 backdrop-blur-sm\">\n              <div className=\"flex items-start gap-3\">\n                <Shield className=\"h-5 w-5 text-primary mt-0.5 flex-shrink-0\" />\n                <p className=\"text-xs text-muted-foreground leading-relaxed\">\n                  <strong className=\"text-foreground\">Security Notice:</strong> This is a protected area. Admin credentials are managed by the system administrator. Unauthorized access attempts are logged and monitored.\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6961},"server/auth.ts":{"content":"import session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport type { RequestHandler } from \"express\";\n\nconst PgSession = connectPg(session);\n\n// Session configuration\nexport function getSessionMiddleware() {\n  if (!process.env.SESSION_SECRET) {\n    throw new Error(\n      \"SESSION_SECRET must be set. This is required for secure session management.\",\n    );\n  }\n\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  \n  const sessionStore = new PgSession({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n\n  const isProduction = process.env.NODE_ENV === \"production\";\n  \n  return session({\n    secret: process.env.SESSION_SECRET,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    name: \"sessionId\", // Custom name instead of default connect.sid\n    cookie: {\n      httpOnly: true, // Prevent XSS attacks\n      secure: isProduction, // HTTPS only in production\n      maxAge: sessionTtl,\n      sameSite: \"strict\", // Strict for better CSRF protection\n      path: \"/\",\n      domain: undefined, // Let browser determine\n    },\n    proxy: true, // Trust proxy for secure cookies\n    rolling: true, // Refresh session on each request\n  });\n}\n\n// Admin authentication middleware\nexport const requireAdmin: RequestHandler = (req, res, next) => {\n  if (!req.session || !req.session.adminId) {\n    return res.status(401).json({ message: \"Unauthorized - Admin login required\" });\n  }\n  next();\n};\n\n// User authentication middleware\nexport const requireUser: RequestHandler = (req, res, next) => {\n  if (!req.session || !req.session.userId) {\n    return res.status(401).json({ message: \"Unauthorized - Please login to continue\" });\n  }\n  next();\n};\n\n// Extend session type\ndeclare module 'express-session' {\n  interface SessionData {\n    adminId: string;\n    adminUsername: string;\n    userId: string;\n    username: string;\n  }\n}\n","size_bytes":1957},"client/src/components/ui/visually-hidden.tsx":{"content":"import * as React from \"react\"\nimport * as VisuallyHiddenPrimitive from \"@radix-ui/react-visually-hidden\"\n\nconst VisuallyHidden = VisuallyHiddenPrimitive.Root\n\nexport { VisuallyHidden }\n","size_bytes":186},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const challenges = pgTable(\"challenges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  difficulty: text(\"difficulty\").notNull(),\n  points: integer(\"points\").notNull(),\n  flag: text(\"flag\").notNull(),\n});\n\n// Users/Players table - CTF participants who can register, login, and submit flags\nexport const players = pgTable(\"players\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  score: integer(\"score\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const submissions = pgTable(\"submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  playerId: varchar(\"player_id\").notNull(),\n  challengeId: varchar(\"challenge_id\").notNull(),\n  submittedFlag: text(\"submitted_flag\").notNull(),\n  isCorrect: integer(\"is_correct\").notNull(),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n});\n\n// Admin users table for secure admin authentication\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Session storage table for admin authentication\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Announcements table for admin notifications\nexport const announcements = pgTable(\"announcements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull().default(\"info\"),\n  isActive: integer(\"is_active\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  createdBy: varchar(\"created_by\").notNull(),\n});\n\n// Settings table for system configuration\nexport const settings = pgTable(\"settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: text(\"key\").notNull().unique(),\n  value: text(\"value\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertChallengeSchema = createInsertSchema(challenges).omit({\n  id: true,\n});\n\nexport const insertPlayerSchema = createInsertSchema(players).omit({\n  id: true,\n  score: true,\n  createdAt: true,\n});\n\n// Registration schema with strong password validation\nexport const registerUserSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\").max(50, \"Username too long\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(/[A-Z]/, \"Password must contain at least one uppercase letter\")\n    .regex(/[a-z]/, \"Password must contain at least one lowercase letter\")\n    .regex(/[0-9]/, \"Password must contain at least one number\"),\n});\n\n// Login schema\nexport const loginUserSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\n// Admin login schema with strict validation\nexport const loginAdminSchema = z.object({\n  username: z.string().min(1, \"Username is required\").max(100),\n  password: z.string().min(1, \"Password is required\").max(200),\n});\n\nexport const insertSubmissionSchema = createInsertSchema(submissions).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAnnouncementSchema = createInsertSchema(announcements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSettingSchema = createInsertSchema(settings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type Challenge = typeof challenges.$inferSelect;\nexport type InsertChallenge = z.infer<typeof insertChallengeSchema>;\n\nexport type Player = typeof players.$inferSelect;\nexport type InsertPlayer = z.infer<typeof insertPlayerSchema>;\nexport type RegisterUser = z.infer<typeof registerUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\nexport type LoginAdmin = z.infer<typeof loginAdminSchema>;\n\nexport type Submission = typeof submissions.$inferSelect;\nexport type InsertSubmission = z.infer<typeof insertSubmissionSchema>;\n\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\n\nexport type Announcement = typeof announcements.$inferSelect;\nexport type InsertAnnouncement = z.infer<typeof insertAnnouncementSchema>;\n\nexport type Setting = typeof settings.$inferSelect;\nexport type InsertSetting = z.infer<typeof insertSettingSchema>;\n","size_bytes":5253},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/ChallengeList.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ChallengeCard } from \"@/components/ChallengeCard\";\nimport { AnnouncementPopup } from \"@/components/AnnouncementPopup\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Filter, Trophy } from \"lucide-react\";\nimport type { Challenge } from \"@shared/schema\";\nimport { useState } from \"react\";\n\nexport function ChallengeList() {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [selectedDifficulty, setSelectedDifficulty] = useState<string>(\"all\");\n\n  const { data: challenges, isLoading } = useQuery<Challenge[]>({\n    queryKey: [\"/api/challenges\"],\n  });\n\n  const { data: solvedChallenges } = useQuery<string[]>({\n    queryKey: [\"/api/solved\"],\n  });\n\n  const categories = [\"all\", \"web\", \"crypto\", \"forensics\", \"reverse\", \"binary\"];\n  const difficulties = [\"all\", \"easy\", \"medium\", \"hard\"];\n\n  const filteredChallenges = challenges?.filter((challenge) => {\n    const categoryMatch = selectedCategory === \"all\" || challenge.category.toLowerCase() === selectedCategory;\n    const difficultyMatch = selectedDifficulty === \"all\" || challenge.difficulty.toLowerCase() === selectedDifficulty;\n    return categoryMatch && difficultyMatch;\n  });\n\n  const solvedCount = solvedChallenges?.length || 0;\n  const totalCount = challenges?.length || 0;\n  const totalPoints = challenges?.reduce((sum, c) => sum + c.points, 0) || 0;\n  const earnedPoints = challenges\n    ?.filter((c) => solvedChallenges?.includes(c.id))\n    .reduce((sum, c) => sum + c.points, 0) || 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-4 w-20 mb-2\" />\n                <Skeleton className=\"h-8 w-16\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-6 w-full mb-4\" />\n                <Skeleton className=\"h-4 w-full mb-2\" />\n                <Skeleton className=\"h-4 w-3/4\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <AnnouncementPopup />\n      <div>\n        <h1 className=\"text-4xl font-serif font-bold mb-2\">Challenges</h1>\n        <p className=\"text-muted-foreground\">\n          Test your skills across various cybersecurity domains\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">Challenges Solved</p>\n                <p className=\"text-3xl font-bold font-mono\" data-testid=\"text-solved-count\">\n                  {solvedCount}/{totalCount}\n                </p>\n              </div>\n              <Trophy className=\"h-10 w-10 text-primary opacity-50\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">Points Earned</p>\n                <p className=\"text-3xl font-bold font-mono text-primary\" data-testid=\"text-earned-points\">\n                  {earnedPoints}\n                </p>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                of {totalPoints}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">Progress</p>\n                <p className=\"text-3xl font-bold font-mono\">\n                  {totalCount > 0 ? Math.round((solvedCount / totalCount) * 100) : 0}%\n                </p>\n              </div>\n              <div className=\"h-2 w-24 bg-secondary rounded-full overflow-hidden\">\n                <div\n                  className=\"h-full bg-primary transition-all\"\n                  style={{ width: `${totalCount > 0 ? (solvedCount / totalCount) * 100 : 0}%` }}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <Filter className=\"h-4 w-4 text-muted-foreground\" />\n            <h2 className=\"font-semibold\">Filters</h2>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-2\">Category</p>\n              <div className=\"flex flex-wrap gap-2\">\n                {categories.map((category) => (\n                  <Button\n                    key={category}\n                    variant={selectedCategory === category ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSelectedCategory(category)}\n                    data-testid={`button-filter-category-${category}`}\n                    className=\"capitalize\"\n                  >\n                    {category}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-2\">Difficulty</p>\n              <div className=\"flex flex-wrap gap-2\">\n                {difficulties.map((difficulty) => (\n                  <Button\n                    key={difficulty}\n                    variant={selectedDifficulty === difficulty ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSelectedDifficulty(difficulty)}\n                    data-testid={`button-filter-difficulty-${difficulty}`}\n                    className=\"capitalize\"\n                  >\n                    {difficulty}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {filteredChallenges && filteredChallenges.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredChallenges.map((challenge, index) => (\n            <ChallengeCard\n              key={challenge.id}\n              challenge={challenge}\n              isSolved={solvedChallenges?.includes(challenge.id)}\n              index={index}\n            />\n          ))}\n        </div>\n      ) : (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <p className=\"text-muted-foreground\">No challenges found matching your filters</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":7283},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { LogIn } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Link, useLocation } from \"wouter\";\n\nexport function Login() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome back!\",\n      });\n      // Reload page to reset app state completely\n      window.location.href = \"/\";\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!username.trim() || !password) return;\n    loginMutation.mutate({ username, password });\n  };\n\n  return (\n    <div className=\"min-h-[80vh] flex items-center justify-center\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-4 text-center\">\n          <div className=\"flex justify-center\">\n            <div className=\"rounded-full bg-primary/10 p-4\">\n              <LogIn className=\"h-10 w-10 text-primary\" />\n            </div>\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-serif font-bold\">Login</h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Sign in to participate in the CTF competition\n            </p>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">\n                Username\n              </label>\n              <Input\n                type=\"text\"\n                placeholder=\"Enter username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                disabled={loginMutation.isPending}\n                data-testid=\"input-username\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">\n                Password\n              </label>\n              <Input\n                type=\"password\"\n                placeholder=\"Enter password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                disabled={loginMutation.isPending}\n                data-testid=\"input-password\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full gap-2\"\n              disabled={loginMutation.isPending || !username.trim() || !password}\n              data-testid=\"button-login\"\n            >\n              <LogIn className=\"h-4 w-4\" />\n              {loginMutation.isPending ? \"Logging in...\" : \"Login\"}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Link href=\"/register\">\n                <a className=\"text-primary hover:underline font-medium\">\n                  Register here\n                </a>\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3899},"client/src/components/AnnouncementPopup.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { VisuallyHidden } from \"@/components/ui/visually-hidden\";\nimport { \n  Info, \n  AlertTriangle, \n  CheckCircle2, \n  XCircle,\n  ChevronRight,\n} from \"lucide-react\";\nimport type { Announcement } from \"@shared/schema\";\n\nconst SEEN_ANNOUNCEMENTS_KEY = \"seen_announcements\";\n\nexport function AnnouncementPopup() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [currentAnnouncementIndex, setCurrentAnnouncementIndex] = useState(0);\n  const [unseenAnnouncements, setUnseenAnnouncements] = useState<Announcement[]>([]);\n  const [animateContent, setAnimateContent] = useState(true);\n\n  const { data: announcements } = useQuery<Announcement[]>({\n    queryKey: [\"/api/announcements\"],\n  });\n\n  useEffect(() => {\n    if (!announcements || announcements.length === 0) return;\n\n    const seenIds = JSON.parse(localStorage.getItem(SEEN_ANNOUNCEMENTS_KEY) || \"[]\");\n    const unseen = announcements.filter(\n      (announcement) => !seenIds.includes(announcement.id)\n    );\n\n    if (unseen.length > 0) {\n      setUnseenAnnouncements(unseen);\n      setCurrentAnnouncementIndex(0);\n      setIsOpen(true);\n    }\n  }, [announcements]);\n\n  const markCurrentAsRead = () => {\n    const currentAnnouncement = unseenAnnouncements[currentAnnouncementIndex];\n    const seenIds = JSON.parse(localStorage.getItem(SEEN_ANNOUNCEMENTS_KEY) || \"[]\");\n    \n    if (!seenIds.includes(currentAnnouncement.id)) {\n      seenIds.push(currentAnnouncement.id);\n      localStorage.setItem(SEEN_ANNOUNCEMENTS_KEY, JSON.stringify(seenIds));\n    }\n  };\n\n  const handleNext = () => {\n    markCurrentAsRead();\n    setAnimateContent(false);\n    setTimeout(() => {\n      if (currentAnnouncementIndex < unseenAnnouncements.length - 1) {\n        setCurrentAnnouncementIndex(currentAnnouncementIndex + 1);\n        setAnimateContent(true);\n      } else {\n        setIsOpen(false);\n        setUnseenAnnouncements([]);\n      }\n    }, 200);\n  };\n\n  const handleSkipToEnd = () => {\n    const seenIds = JSON.parse(localStorage.getItem(SEEN_ANNOUNCEMENTS_KEY) || \"[]\");\n    unseenAnnouncements.forEach((announcement) => {\n      if (!seenIds.includes(announcement.id)) {\n        seenIds.push(announcement.id);\n      }\n    });\n    localStorage.setItem(SEEN_ANNOUNCEMENTS_KEY, JSON.stringify(seenIds));\n    setIsOpen(false);\n    setUnseenAnnouncements([]);\n  };\n\n  const handleDismiss = () => {\n    setIsOpen(false);\n    setUnseenAnnouncements([]);\n  };\n\n  if (!unseenAnnouncements || unseenAnnouncements.length === 0) {\n    return null;\n  }\n\n  const currentAnnouncement = unseenAnnouncements[currentAnnouncementIndex];\n\n  const getTheme = (type: string) => {\n    switch (type) {\n      case \"warning\":\n        return {\n          gradient: \"from-amber-500 to-orange-600\",\n          lightBg: \"from-amber-500/10 to-orange-500/10\",\n          icon: AlertTriangle,\n          iconBg: \"from-amber-500 to-orange-600\",\n          badgeClass: \"bg-gradient-to-r from-amber-500 to-orange-600 text-white border-0 shadow-lg shadow-amber-500/30\",\n        };\n      case \"success\":\n        return {\n          gradient: \"from-green-500 to-emerald-600\",\n          lightBg: \"from-green-500/10 to-emerald-500/10\",\n          icon: CheckCircle2,\n          iconBg: \"from-green-500 to-emerald-600\",\n          badgeClass: \"bg-gradient-to-r from-green-500 to-emerald-600 text-white border-0 shadow-lg shadow-green-500/30\",\n        };\n      case \"error\":\n        return {\n          gradient: \"from-red-500 to-rose-600\",\n          lightBg: \"from-red-500/10 to-rose-500/10\",\n          icon: XCircle,\n          iconBg: \"from-red-500 to-rose-600\",\n          badgeClass: \"bg-gradient-to-r from-red-500 to-rose-600 text-white border-0 shadow-lg shadow-red-500/30\",\n        };\n      default:\n        return {\n          gradient: \"from-blue-500 to-cyan-600\",\n          lightBg: \"from-blue-500/10 to-cyan-500/10\",\n          icon: Info,\n          iconBg: \"from-blue-500 to-cyan-600\",\n          badgeClass: \"bg-gradient-to-r from-blue-500 to-cyan-600 text-white border-0 shadow-lg shadow-blue-500/30\",\n        };\n    }\n  };\n\n  const theme = getTheme(currentAnnouncement.type);\n  const Icon = theme.icon;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && handleDismiss()}>\n      <DialogContent className=\"max-w-2xl p-0 gap-0 overflow-hidden border-0 shadow-2xl\">\n        <VisuallyHidden>\n          <DialogTitle>{currentAnnouncement.title}</DialogTitle>\n          <DialogDescription>{currentAnnouncement.message}</DialogDescription>\n        </VisuallyHidden>\n        <div className=\"relative\">\n          {/* Decorative gradient background */}\n          <div className={`absolute inset-0 bg-gradient-to-br ${theme.lightBg} opacity-50`} />\n          \n          {/* Main content */}\n          <div className=\"relative p-8 space-y-6\">\n            {/* Header with icon and title */}\n            <div className=\"flex items-start gap-6\">\n              <div className={`flex-shrink-0 h-16 w-16 rounded-2xl bg-gradient-to-br ${theme.iconBg} flex items-center justify-center shadow-xl animate-bounce-in`}>\n                <Icon className=\"h-8 w-8 text-white\" />\n              </div>\n              \n              <div className=\"flex-1 space-y-3 pt-1\">\n                <h2 \n                  className={`text-3xl font-bold ${animateContent ? 'animate-slide-in-right' : 'opacity-0'}`}\n                  data-testid=\"text-announcement-title\"\n                >\n                  {currentAnnouncement.title}\n                </h2>\n                <div className=\"flex items-center gap-3 flex-wrap\">\n                  <Badge className={theme.badgeClass} data-testid=\"badge-announcement-type\">\n                    {currentAnnouncement.type}\n                  </Badge>\n                  {unseenAnnouncements.length > 1 && (\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                      <div className=\"flex gap-1\" data-testid=\"announcement-progress-dots\">\n                        {unseenAnnouncements.map((_, idx) => (\n                          <div\n                            key={idx}\n                            className={`h-1.5 rounded-full transition-all ${\n                              idx === currentAnnouncementIndex\n                                ? `w-6 bg-gradient-to-r ${theme.gradient}`\n                                : idx < currentAnnouncementIndex\n                                ? \"w-1.5 bg-muted-foreground/50\"\n                                : \"w-1.5 bg-muted-foreground/20\"\n                            }`}\n                            data-testid={`progress-dot-${idx}`}\n                          />\n                        ))}\n                      </div>\n                      <span className=\"font-medium\" data-testid=\"text-announcement-counter\">\n                        {currentAnnouncementIndex + 1} / {unseenAnnouncements.length}\n                      </span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Message content */}\n            <div className={`bg-card rounded-xl p-6 border-2 shadow-inner ${animateContent ? 'animate-fade-in' : 'opacity-0'}`}>\n              <p \n                className=\"text-lg leading-relaxed whitespace-pre-wrap\"\n                data-testid=\"text-announcement-message\"\n              >\n                {currentAnnouncement.message}\n              </p>\n            </div>\n\n            {/* Action buttons */}\n            <div className=\"flex items-center justify-between pt-2\">\n              <Button \n                variant=\"ghost\" \n                onClick={handleDismiss}\n                className=\"text-muted-foreground hover:text-foreground\"\n                data-testid=\"button-announcement-dismiss\"\n              >\n                Remind me later\n              </Button>\n              \n              <div className=\"flex gap-3\">\n                {unseenAnnouncements.length > 1 && currentAnnouncementIndex < unseenAnnouncements.length - 1 && (\n                  <Button \n                    variant=\"outline\" \n                    onClick={handleNext}\n                    className=\"gap-2 hover:gap-3 transition-all\"\n                    data-testid=\"button-announcement-next\"\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                )}\n                <Button \n                  onClick={currentAnnouncementIndex === unseenAnnouncements.length - 1 ? handleNext : handleSkipToEnd}\n                  className={`bg-gradient-to-r ${theme.gradient} hover:opacity-90 transition-opacity shadow-lg min-w-24`}\n                  data-testid=\"button-announcement-confirm\"\n                >\n                  {currentAnnouncementIndex === unseenAnnouncements.length - 1\n                    ? \"Got it!\"\n                    : `Skip to end`}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9251},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"server/services/install.service.ts":{"content":"import { storage } from \"../storage\";\nimport { AuthService } from \"./auth.service\";\nimport { db } from \"../db\";\nimport { challenges, submissions, announcements } from \"@shared/schema\";\nimport type { InsertChallenge, InsertAnnouncement, InsertPlayer } from \"@shared/schema\";\n\nexport interface SystemCheck {\n  hasDatabase: boolean;\n  databaseConnected: boolean;\n  hasSessionSecret: boolean;\n  hasDatabaseUrl: boolean;\n  isInstalled: boolean;\n  adminCount: number;\n  challengeCount: number;\n  playerCount: number;\n  errors: string[];\n}\n\nexport interface InstallConfig {\n  adminUsername: string;\n  adminPassword: string;\n  siteName?: string;\n  siteDescription?: string;\n}\n\nexport class InstallService {\n  static async checkSystem(): Promise<SystemCheck> {\n    const checks: SystemCheck = {\n      hasDatabase: false,\n      databaseConnected: false,\n      hasSessionSecret: !!process.env.SESSION_SECRET,\n      hasDatabaseUrl: !!process.env.DATABASE_URL,\n      isInstalled: false,\n      adminCount: 0,\n      challengeCount: 0,\n      playerCount: 0,\n      errors: [],\n    };\n\n    try {\n      const admins = await storage.getAllAdmins();\n      checks.adminCount = admins.length;\n      checks.isInstalled = admins.length > 0;\n      checks.databaseConnected = true;\n      checks.hasDatabase = true;\n\n      const challengesCount = await db.query.challenges.findMany();\n      checks.challengeCount = challengesCount.length;\n\n      const playersCount = await db.query.players.findMany();\n      checks.playerCount = playersCount.length;\n    } catch (error: any) {\n      checks.errors.push(`Database connection error: ${error.message}`);\n      checks.databaseConnected = false;\n    }\n\n    if (!checks.hasDatabaseUrl) {\n      checks.errors.push(\"DATABASE_URL environment variable is not set\");\n    }\n\n    if (!checks.hasSessionSecret) {\n      checks.errors.push(\"SESSION_SECRET environment variable is not set\");\n    }\n\n    return checks;\n  }\n\n  static async performInstall(config: InstallConfig): Promise<{ success: boolean; message: string }> {\n    try {\n      const systemCheck = await this.checkSystem();\n\n      if (systemCheck.isInstalled) {\n        return { success: false, message: \"System is already installed\" };\n      }\n\n      if (!systemCheck.databaseConnected) {\n        return { success: false, message: \"Database connection failed\" };\n      }\n\n      const passwordValidation = AuthService.validatePasswordStrength(config.adminPassword);\n      if (!passwordValidation.valid) {\n        return { success: false, message: passwordValidation.message || \"Password validation failed\" };\n      }\n\n      await storage.createAdmin({\n        username: config.adminUsername,\n        passwordHash: await AuthService.hashPassword(config.adminPassword),\n      });\n\n      await storage.setSetting(\"site_name\", config.siteName || \"CTF Platform\");\n      await storage.setSetting(\"site_description\", config.siteDescription || \"Capture The Flag Platform\");\n      await storage.setSetting(\"installed_at\", new Date().toISOString());\n      await storage.setSetting(\"install_version\", \"1.0.0\");\n\n      if (systemCheck.challengeCount === 0) {\n        await this.seedDemoData();\n      }\n\n      return { success: true, message: \"Installation completed successfully\" };\n    } catch (error: any) {\n      console.error(\"Installation error:\", error);\n      return { success: false, message: error.message || \"Installation failed\" };\n    }\n  }\n\n  static async seedDemoData(): Promise<void> {\n    const sampleChallenges: InsertChallenge[] = [\n      {\n        title: \"SQL Injection Basics\",\n        description: \"Find the hidden flag in this vulnerable login page. The application doesn't properly sanitize user input. Try using common SQL injection techniques to bypass authentication.\\n\\nURL: http://vulnerable-app.ctf/login\\nHint: Think about how you can manipulate the SQL query.\",\n        category: \"web\",\n        difficulty: \"easy\",\n        points: 100,\n        flag: \"flag{sql_1nj3ct10n_1s_d4ng3r0us}\",\n      },\n      {\n        title: \"Caesar's Secret\",\n        description: \"An ancient encryption method was used to hide this message:\\n\\nGSVH R ORPV XIBKGLTIZKSR\\n\\nThe key is somewhere between 1 and 25. Can you decode it?\",\n        category: \"crypto\",\n        difficulty: \"easy\",\n        points: 150,\n        flag: \"flag{i_like_cryptography}\",\n      },\n      {\n        title: \"Hidden in Plain Sight\",\n        description: \"We intercepted this image file. Our analysts believe there's hidden data embedded within it. Can you extract the secret?\\n\\nDownload: secret_image.png (Simulated - Flag hidden in metadata)\\n\\nTools you might need: exiftool, strings, binwalk\",\n        category: \"forensics\",\n        difficulty: \"medium\",\n        points: 250,\n        flag: \"flag{st3g4n0gr4phy_m4st3r}\",\n      },\n      {\n        title: \"Buffer Overflow 101\",\n        description: \"This program has a classic buffer overflow vulnerability. Exploit it to gain control of the execution flow and retrieve the flag.\\n\\n```c\\n#include <stdio.h>\\n#include <string.h>\\n\\nvoid secret() {\\n    printf(\\\"Flag: flag{buff3r_0v3rfl0w_pwn3d}\\\\n\\\");\\n}\\n\\nint main() {\\n    char buffer[64];\\n    gets(buffer);\\n    return 0;\\n}\\n```\",\n        category: \"binary\",\n        difficulty: \"hard\",\n        points: 400,\n        flag: \"flag{buff3r_0v3rfl0w_pwn3d}\",\n      },\n      {\n        title: \"XSS Playground\",\n        description: \"This web application reflects user input without proper sanitization. Craft an XSS payload that will execute JavaScript and reveal the flag stored in a cookie.\\n\\nURL: http://xss-challenge.ctf/search\\nCookie name: secret_flag\",\n        category: \"web\",\n        difficulty: \"medium\",\n        points: 200,\n        flag: \"flag{xss_c4n_b3_d4ng3r0us}\",\n      },\n      {\n        title: \"RSA Weakness\",\n        description: \"We captured this RSA encrypted message along with the public key. The key size seems suspiciously small...\\n\\nn = 84823428793\\ne = 65537\\nc = 27856425893\\n\\nCan you decrypt it?\",\n        category: \"crypto\",\n        difficulty: \"hard\",\n        points: 350,\n        flag: \"flag{sm4ll_k3y_br0k3n}\",\n      },\n      {\n        title: \"Memory Corruption\",\n        description: \"This binary has a use-after-free vulnerability. Can you exploit it to read the flag from memory?\\n\\nDownload: vulnerable_binary (Simulated)\\n\\nThe flag is stored at address 0x08048000\",\n        category: \"binary\",\n        difficulty: \"hard\",\n        points: 450,\n        flag: \"flag{m3m0ry_l34k_pwn}\",\n      },\n      {\n        title: \"Directory Traversal\",\n        description: \"This web server allows file downloads but doesn't validate the filename properly. Can you read the flag file?\\n\\nURL: http://fileserver.ctf/download?file=document.pdf\\nFlag location: /etc/ctf_flag.txt\",\n        category: \"web\",\n        difficulty: \"medium\",\n        points: 300,\n        flag: \"flag{p4th_tr4v3rs4l_vuln}\",\n      },\n      {\n        title: \"JWT Confusion\",\n        description: \"This application uses JWT for authentication. The implementation has a critical flaw in how it validates tokens. Can you forge an admin token?\\n\\nURL: http://jwt-app.ctf/api\\nHint: Check the algorithm field\",\n        category: \"web\",\n        difficulty: \"hard\",\n        points: 400,\n        flag: \"flag{jwt_4lg_c0nfus10n}\",\n      },\n      {\n        title: \"Weak Hashing\",\n        description: \"We found a password hash in a database dump:\\n\\n5f4dcc3b5aa765d61d8327deb882cf99\\n\\nCan you crack it and submit the flag?\\nFlag format: flag{cracked_password}\",\n        category: \"crypto\",\n        difficulty: \"easy\",\n        points: 100,\n        flag: \"flag{password}\",\n      },\n      {\n        title: \"Command Injection\",\n        description: \"This ping utility doesn't sanitize user input properly. Can you inject commands to read the flag?\\n\\nURL: http://ping.ctf/check?host=google.com\\nFlag location: /home/ctf/flag.txt\",\n        category: \"web\",\n        difficulty: \"medium\",\n        points: 250,\n        flag: \"flag{c0mm4nd_1nj3ct10n}\",\n      },\n      {\n        title: \"Reverse Engineering Challenge\",\n        description: \"This program checks if your input is correct and reveals the flag. Can you reverse engineer the algorithm?\\n\\nDownload: crackme (Simulated)\\nHint: The flag is XORed with a key\",\n        category: \"reverse\",\n        difficulty: \"hard\",\n        points: 400,\n        flag: \"flag{r3v3rs3_m3_1f_y0u_c4n}\",\n      },\n    ];\n\n    const sampleAnnouncements: InsertAnnouncement[] = [\n      {\n        title: \"Welcome to CTF Platform!\",\n        message: \"Thank you for joining our CTF competition. Read the rules carefully and have fun hacking!\",\n        type: \"info\",\n        isActive: 1,\n        createdBy: \"system\",\n      },\n      {\n        title: \"Competition Rules\",\n        message: \"1. No DDoS attacks\\n2. No sharing flags\\n3. No automated tools without permission\\n4. Report bugs responsibly\",\n        type: \"warning\",\n        isActive: 1,\n        createdBy: \"system\",\n      },\n      {\n        title: \"New Challenges Added!\",\n        message: \"We've added 3 new challenges in the Reverse Engineering category. Check them out!\",\n        type: \"success\",\n        isActive: 1,\n        createdBy: \"system\",\n      },\n    ];\n\n    const samplePlayers: InsertPlayer[] = [\n      {\n        username: \"alice\",\n        email: \"alice@example.com\",\n        passwordHash: await AuthService.hashPassword(\"Alice123!\"),\n      },\n      {\n        username: \"bob\",\n        email: \"bob@example.com\",\n        passwordHash: await AuthService.hashPassword(\"Bob123!\"),\n      },\n      {\n        username: \"charlie\",\n        email: \"charlie@example.com\",\n        passwordHash: await AuthService.hashPassword(\"Charlie123!\"),\n      },\n    ];\n\n    for (const challenge of sampleChallenges) {\n      await storage.createChallenge(challenge);\n    }\n\n    for (const announcement of sampleAnnouncements) {\n      await storage.createAnnouncement(announcement);\n    }\n\n    for (const player of samplePlayers) {\n      await storage.createPlayer(player);\n    }\n\n    console.log(\"‚úÖ Demo data seeded successfully\");\n  }\n\n  static async resetDemoData(): Promise<void> {\n    await db.delete(challenges);\n    await db.delete(submissions);\n    await db.delete(announcements);\n    \n    await this.seedDemoData();\n  }\n\n  static async getSystemHealth(): Promise<any> {\n    const checks = await this.checkSystem();\n    const settings = await storage.getAllSettings();\n\n    return {\n      ...checks,\n      settings: settings.reduce((acc: any, setting) => {\n        acc[setting.key] = setting.value;\n        return acc;\n      }, {}),\n      uptime: process.uptime(),\n      nodeVersion: process.version,\n      platform: process.platform,\n      memory: {\n        used: process.memoryUsage().heapUsed,\n        total: process.memoryUsage().heapTotal,\n      },\n    };\n  }\n}\n","size_bytes":10773},"server/middleware/auth.middleware.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { InstallService } from \"../services/install.service\";\n\nexport async function requireAdminOnlyAfterInstall(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const systemCheck = await InstallService.checkSystem();\n    \n    if (systemCheck.isInstalled && !req.session?.adminId) {\n      return res.status(403).json({\n        message: \"Access denied. System is installed. Admin authentication required.\"\n      });\n    }\n    \n    next();\n  } catch (error: any) {\n    console.error(\"Auth middleware error:\", error);\n    res.status(500).json({ message: \"Authentication check failed\" });\n  }\n}\n\nexport function requireAdmin(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  if (!req.session?.adminId) {\n    return res.status(403).json({\n      message: \"Admin authentication required\"\n    });\n  }\n  next();\n}\n","size_bytes":898}},"version":2}